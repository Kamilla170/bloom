import asyncio
import os
import logging
from datetime import datetime, timedelta
import json
import base64
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiohttp import web
from openai import AsyncOpenAI
from PIL import Image
from database import init_database, get_db

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (UTC+3)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PLANTID_API_KEY = os.getenv("PLANTID_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
temp_analyses = {}

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
PLANT_IDENTIFICATION_PROMPT = """
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ:
1. –§–æ—Ä–º—É –∏ —Ç–µ–∫—Å—Ç—É—Ä—É –ª–∏—Å—Ç—å–µ–≤ (–æ–≤–∞–ª—å–Ω—ã–µ/–¥–ª–∏–Ω–Ω—ã–µ/–º—è—Å–∏—Å—Ç—ã–µ/–≥–ª—è–Ω—Ü–µ–≤—ã–µ/–º–∞—Ç–æ–≤—ã–µ)
2. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ –Ω–∞ —Å—Ç–µ–±–ª–µ
3. –¶–≤–µ—Ç –∏ –ø—Ä–æ–∂–∏–ª–∫–∏ –ª–∏—Å—Ç—å–µ–≤
4. –§–æ—Ä–º—É —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
5. –í–∏–¥–∏–º—ã–µ —Ü–≤–µ—Ç—ã –∏–ª–∏ –ø–ª–æ–¥—ã
6. –†–∞–∑–º–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –≥–æ—Ä—à–∫–∞

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï –ö –°–û–°–¢–û–Ø–ù–ò–Æ –ü–û–õ–ò–í–ê:
- –û—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–≤—è–¥–∞–Ω–∏—è, –∂–µ–ª—Ç–∏–∑–Ω—ã, –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö –ø—è—Ç–µ–Ω
- –û—Ü–µ–Ω–∏—Ç–µ —É–ø—Ä—É–≥–æ—Å—Ç—å –∏ —Ç—É—Ä–≥–æ—Ä –ª–∏—Å—Ç—å–µ–≤
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Å—É—à–∏–≤–∞–Ω–∏—è
- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á–≤—ã (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)

–î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–†–ê–°–¢–ï–ù–ò–ï: [–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ª–∞—Ç–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [–ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏]
–ü–†–ò–ó–ù–ê–ö–ò: [–∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏]
–°–ï–ú–ï–ô–°–¢–í–û: [–±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ]
–†–û–î–ò–ù–ê: [–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è]

–°–û–°–¢–û–Ø–ù–ò–ï: [–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ –ª–∏—Å—Ç—å—è–º, —Ü–≤–µ—Ç—É, —É–ø—Ä—É–≥–æ—Å—Ç–∏]
–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: [–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–∏–≤–∞ - –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–æ/–Ω–µ–¥–æ–ø–æ–ª–∏—Ç–æ/–Ω–æ—Ä–º–∞]
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –æ–±—ä–µ–º—É –ø–æ–ª–∏–≤–∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≠–¢–û–ì–û —ç–∫–∑–µ–º–ø–ª—è—Ä–∞]
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: [—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö –¥–ª—è –≠–¢–û–ì–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: 2-15]
–°–í–ï–¢: [—Ç–æ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è]
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: [–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞]
–í–õ–ê–ñ–ù–û–°–¢–¨: [—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞]
–ü–û–î–ö–û–†–ú–ö–ê: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º]
–ü–ï–†–ï–°–ê–î–ö–ê: [–∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∏–¥]

–ü–†–û–ë–õ–ï–ú–´: [–≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞]
–°–û–í–ï–¢: [—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É—Ö–æ–¥–∞ –∑–∞ —ç—Ç–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º]

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ª–∏–≤–∞. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ä–æ–¥ –∏–ª–∏ —Å–µ–º–µ–π—Å—Ç–≤–æ.
"""

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PlantStates(StatesGroup):
    waiting_question = State()
    editing_plant_name = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_now():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ"""
    return datetime.now(MOSCOW_TZ)

def get_moscow_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ"""
    return get_moscow_now().date()

# === –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

async def check_and_send_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª–∏–≤–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —É—Ç—Ä–æ–º)"""
    try:
        db = await get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_now = get_moscow_now()
        moscow_date = moscow_now.date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª–∏—Ç—å
        async with db.pool.acquire() as conn:
            plants_to_water = await conn.fetch("""
                SELECT p.id, p.user_id, 
                       COALESCE(p.custom_name, p.plant_name, '–†–∞—Å—Ç–µ–Ω–∏–µ #' || p.id) as display_name,
                       p.last_watered, 
                       COALESCE(p.watering_interval, 5) as watering_interval, 
                       p.photo_file_id, p.notes
                FROM plants p
                JOIN user_settings us ON p.user_id = us.user_id
                WHERE p.reminder_enabled = TRUE 
                  AND us.reminder_enabled = TRUE
                  AND (
                    p.last_watered IS NULL 
                    OR p.last_watered::date + (COALESCE(p.watering_interval, 5) || ' days')::interval <= $1::date
                  )
                  AND NOT EXISTS (
                    SELECT 1 FROM reminders r 
                    WHERE r.plant_id = p.id 
                    AND r.last_sent::date = $1::date
                  )
                ORDER BY p.last_watered ASC NULLS FIRST
            """, moscow_date)
            
            for plant in plants_to_water:
                await send_watering_reminder(plant)
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def send_watering_reminder(plant_row):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ"""
    try:
        user_id = plant_row['user_id']
        plant_id = plant_row['id']
        plant_name = plant_row['display_name']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        db = await get_db()
        plant_info = await db.get_plant_by_id(plant_id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–∏–≤–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        moscow_now = get_moscow_now()
        
        if plant_row['last_watered']:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –∏–∑ –ë–î –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            last_watered_utc = plant_row['last_watered']
            if last_watered_utc.tzinfo is None:
                last_watered_utc = pytz.UTC.localize(last_watered_utc)
            last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
            
            days_ago = (moscow_now.date() - last_watered_moscow.date()).days
            if days_ago == 1:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª –≤—á–µ—Ä–∞"
            else:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        else:
            time_info = "–†–∞—Å—Ç–µ–Ω–∏–µ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üíß <b>–í—Ä–µ–º—è –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ!</b>\n\n"
        message_text += f"üå± <b>{plant_name}</b>\n"
        message_text += f"‚è∞ {time_info}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if plant_info and plant_info.get('notes'):
            notes = plant_info['notes']
            if "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:" in notes:
                personal_rec = notes.replace("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:", "").strip()
                message_text += f"\nüí° <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{personal_rec}\n"
            else:
                message_text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∞:</b> {notes}\n"
        else:
            message_text += f"\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–∞–ª—å—Ü–µ–º\n"
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        interval = plant_row.get('watering_interval', 5)
        message_text += f"\n‚è±Ô∏è <i>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π</i>"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton(text="üíß –ü–æ–ª–∏–ª(–∞)!", callback_data=f"water_plant_{plant_id}")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞", callback_data=f"snooze_{plant_id}")],
            [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")],
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
        await bot.send_photo(
            chat_id=user_id,
            photo=plant_row['photo_file_id'],
            caption=message_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
        moscow_now_str = moscow_now.strftime('%Y-%m-%d %H:%M:%S')
        async with db.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO reminders (user_id, plant_id, reminder_type, next_date, last_sent)
                VALUES ($1, $2, 'watering', $3::timestamp, $3::timestamp)
                ON CONFLICT (user_id, plant_id, reminder_type) 
                WHERE is_active = TRUE
                DO UPDATE SET 
                    last_sent = $3::timestamp,
                    send_count = COALESCE(reminders.send_count, 0) + 1
            """, user_id, plant_id, moscow_now_str)
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ {plant_name}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def create_plant_reminder(plant_id: int, user_id: int, interval_days: int = 5):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        next_watering = moscow_now + timedelta(days=interval_days)
        
        await db.create_reminder(
            user_id=user_id,
            plant_id=plant_id,
            reminder_type='watering',
            next_date=next_watering
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.callback_query(F.data.startswith("snooze_"))
async def snooze_reminder_callback(callback: types.CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if plant:
            plant_name = plant['display_name']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å)
            await create_plant_reminder(plant_id, user_id, 1)
            
            await callback.message.answer(
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ</b>\n\n"
                f"üå± <b>{plant_name}</b>\n"
                f"üìÖ –ó–∞–≤—Ç—Ä–∞ –Ω–∞–ø–æ–º–Ω—é –ø–æ–ª–∏—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
                f"üí° –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—Ç–µ - –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üíß –ü–æ–ª–∏–ª(–∞) —Å–µ–π—á–∞—Å", callback_data=f"water_plant_{plant_id}")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")],
                ])
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    await callback.answer()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
@dp.callback_query(F.data == "save_plant")
async def save_plant_callback(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø–æ–ª–∏–≤—É"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        try:
            analysis_data = temp_analyses[user_id]
            raw_analysis = analysis_data.get("analysis", "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏–≤–µ
            watering_info = extract_personal_watering_info(raw_analysis)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db = await get_db()
            plant_id = await db.save_plant(
                user_id=user_id,
                analysis=raw_analysis,
                photo_file_id=analysis_data["photo_file_id"],
                plant_name=analysis_data.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞
            personal_interval = watering_info["interval_days"]
            await db.update_plant_watering_interval(plant_id, personal_interval)
            
            # –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–æ–ª–∏–≤–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
            if watering_info["needs_adjustment"] and watering_info["personal_recommendations"]:
                async with db.pool.acquire() as conn:
                    await conn.execute("""
                        UPDATE plants SET notes = $1 WHERE id = $2
                    """, f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É: {watering_info['personal_recommendations']}", plant_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            await create_plant_reminder(plant_id, user_id, personal_interval)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del temp_analyses[user_id]
            
            plant_name = analysis_data.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            success_text = f"‚úÖ <b>–†–∞—Å—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!</b>\n\n"
            success_text += f"üå± <b>{plant_name}</b> —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º —Å–∞–¥—É\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            if watering_info["current_state"]:
                if watering_info["needs_adjustment"]:
                    success_text += f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {watering_info['current_state']}\n"
                else:
                    success_text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∏–≤–∞: {watering_info['current_state']}\n"
            
            success_text += f"‚è∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: –∫–∞–∂–¥—ã–µ {personal_interval} –¥–Ω–µ–π\n\n"
            
            if watering_info["personal_recommendations"]:
                success_text += f"üí° –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            
            if watering_info["needs_adjustment"]:
                success_text += f"üîç <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Ç–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–æ–ª–∏–≤–∞\n"
                success_text += f"üíß –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ {personal_interval} –¥–Ω–µ–π —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
            else:
                success_text += f"üíß –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–ª–∏–≤–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ {personal_interval} –¥–Ω–µ–π"
            
            await callback.message.answer(
                success_text,
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
    
    await callback.answer()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–∏–≤–∞
@dp.callback_query(F.data.startswith("water_plant_"))
async def water_single_plant_callback(callback: types.CallbackQuery):
    """–ü–æ–ª–∏–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∏–≤
        await db.update_watering(user_id, plant_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        interval = plant.get('watering_interval', 5)
        await create_plant_reminder(plant_id, user_id, interval)
        
        current_time = get_moscow_now().strftime("%d.%m.%Y –≤ %H:%M")
        plant_name = plant['display_name']
        
        await callback.message.answer(
            f"üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n"
            f"üå± <b>{plant_name}</b> –ø–æ–ª–∏—Ç–æ {current_time}\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –¥–Ω–µ–π",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåø –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
            ])
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞")
    
    await callback.answer()

# === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")],
        [InlineKeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="analyze")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants")],
        [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def after_analysis():
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="save_plant")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data="ask_about")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="reanalyze")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ª–∏–≤—É
def extract_personal_watering_info(analysis_text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏–≤–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    watering_info = {
        "interval_days": 5,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "personal_recommendations": "",
        "current_state": "",
        "needs_adjustment": False
    }
    
    if not analysis_text:
        return watering_info
    
    lines = analysis_text.split('\n')
    
    for line in lines:
        line = line.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if line.startswith("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:"):
            interval_text = line.replace("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:", "").strip()
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            numbers = re.findall(r'\d+', interval_text)
            if numbers:
                try:
                    interval = int(numbers[0])
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
                    if 1 <= interval <= 15:
                        watering_info["interval_days"] = interval
                except:
                    pass
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        elif line.startswith("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:"):
            current_state = line.replace("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:", "").strip()
            watering_info["current_state"] = current_state
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            if any(word in current_state.lower() for word in ["–ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω", "–ø–µ—Ä–µ–ª–∏–≤", "–Ω–µ–¥–æ–ø–æ–ª–∏—Ç", "–ø–µ—Ä–µ—Å—É—à–µ–Ω", "–ø—Ä–æ–±–ª–µ–º"]):
                watering_info["needs_adjustment"] = True
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        elif line.startswith("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            recommendations = line.replace("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
            watering_info["personal_recommendations"] = recommendations
            
    return watering_info

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
def format_plant_analysis(raw_text: str, confidence: float = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    
    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
    formatted = ""
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
    confidence_level = confidence or 0
    
    for line in lines:
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            display_name = plant_name.split("(")[0].strip()
            formatted += f"üåø <b>{display_name}</b>\n"
            if "(" in plant_name:
                latin_name = plant_name[plant_name.find("(")+1:plant_name.find(")")]
                formatted += f"üè∑Ô∏è <i>{latin_name}</i>\n"
            
        elif line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
            conf = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip()
            try:
                confidence_level = float(conf.replace("%", ""))
                if confidence_level >= 80:
                    conf_icon = "üéØ"
                elif confidence_level >= 60:
                    conf_icon = "üé™"
                else:
                    conf_icon = "ü§î"
                formatted += f"{conf_icon} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
            except:
                formatted += f"üé™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
                
        elif line.startswith("–ü–†–ò–ó–ù–ê–ö–ò:"):
            signs = line.replace("–ü–†–ò–ó–ù–ê–ö–ò:", "").strip()
            formatted += f"üîç <b>–ü—Ä–∏–∑–Ω–∞–∫–∏:</b> {signs}\n"
            
        elif line.startswith("–°–ï–ú–ï–ô–°–¢–í–û:"):
            family = line.replace("–°–ï–ú–ï–ô–°–¢–í–û:", "").strip()
            formatted += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°–µ–º–µ–π—Å—Ç–≤–æ:</b> {family}\n"
            
        elif line.startswith("–†–û–î–ò–ù–ê:"):
            origin = line.replace("–†–û–î–ò–ù–ê:", "").strip()
            formatted += f"üåç <b>–†–æ–¥–∏–Ω–∞:</b> {origin}\n\n"
            
        elif line.startswith("–°–û–°–¢–û–Ø–ù–ò–ï:"):
            condition = line.replace("–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip()
            if any(word in condition.lower() for word in ["–∑–¥–æ—Ä–æ–≤", "—Ö–æ—Ä–æ—à", "–æ—Ç–ª–∏—á–Ω", "–Ω–æ—Ä–º"]):
                icon = "‚úÖ"
            elif any(word in condition.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–±–æ–ª–µ–Ω", "–ø–ª–æ—Ö", "—Å—Ç—Ä–µ—Å—Å"]):
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ÑπÔ∏è"
            formatted += f"{icon} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition}\n"
            
        elif line.startswith("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:"):
            watering_analysis = line.replace("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:", "").strip()
            if any(word in watering_analysis.lower() for word in ["–ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω", "–ø–µ—Ä–µ–ª–∏–≤"]):
                icon = "üî¥"
            elif any(word in watering_analysis.lower() for word in ["–Ω–µ–¥–æ–ø–æ–ª–∏—Ç", "–ø–µ—Ä–µ—Å—É—à–µ–Ω"]):
                icon = "üü°"
            else:
                icon = "üü¢"
            formatted += f"{icon} <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≤–∞:</b> {watering_analysis}\n"
            
        elif line.startswith("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            watering_rec = line.replace("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
            formatted += f"üíß <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:</b> {watering_rec}\n"
            
        elif line.startswith("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:"):
            interval = line.replace("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:", "").strip()
            formatted += f"‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval} –¥–Ω–µ–π\n\n"
            
        elif line.startswith("–°–í–ï–¢:"):
            light = line.replace("–°–í–ï–¢:", "").strip()
            formatted += f"‚òÄÔ∏è <b>–û—Å–≤–µ—â–µ–Ω–∏–µ:</b> {light}\n"
            
        elif line.startswith("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:"):
            temp = line.replace("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:", "").strip()
            formatted += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}\n"
            
        elif line.startswith("–í–õ–ê–ñ–ù–û–°–¢–¨:"):
            humidity = line.replace("–í–õ–ê–ñ–ù–û–°–¢–¨:", "").strip()
            formatted += f"üí® <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}\n"
            
        elif line.startswith("–ü–û–î–ö–û–†–ú–ö–ê:"):
            feeding = line.replace("–ü–û–î–ö–û–†–ú–ö–ê:", "").strip()
            formatted += f"üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> {feeding}\n"
            
        elif line.startswith("–ü–ï–†–ï–°–ê–î–ö–ê:"):
            repot = line.replace("–ü–ï–†–ï–°–ê–î–ö–ê:", "").strip()
            formatted += f"ü™¥ <b>–ü–µ—Ä–µ—Å–∞–¥–∫–∞:</b> {repot}\n"
            
        elif line.startswith("–ü–†–û–ë–õ–ï–ú–´:"):
            problems = line.replace("–ü–†–û–ë–õ–ï–ú–´:", "").strip()
            formatted += f"\n‚ö†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {problems}\n"
            
        elif line.startswith("–°–û–í–ï–¢:"):
            advice = line.replace("–°–û–í–ï–¢:", "").strip()
            formatted += f"\nüí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:</b> {advice}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    if confidence_level >= 80:
        formatted += "\n\nüèÜ <i>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</i>"
    elif confidence_level >= 60:
        formatted += "\n\nüëç <i>–•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</i>"
    else:
        formatted += "\n\nü§î <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</i>"
    
    formatted += "\nüíæ <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!</i>"
    
    return formatted

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def optimize_image_for_analysis(image_data: bytes, high_quality: bool = True) -> bytes:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        image = Image.open(BytesIO(image_data))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if high_quality:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if max(image.size) < 1024:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ratio = 1024 / max(image.size)
                new_size = (int(image.size[0] * ratio), int(image.size[1] * ratio))
                image = image.resize(new_size, Image.Resampling.LANCZOS)
            elif max(image.size) > 2048:
                # –£–º–µ–Ω—å—à–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ
                image.thumbnail((2048, 2048), Image.Resampling.LANCZOS)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if max(image.size) > 1024:
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
        
        output = BytesIO()
        # –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        quality = 95 if high_quality else 85
        image.save(output, format='JPEG', quality=quality, optimize=True)
        return output.getvalue()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image_data

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision
async def analyze_with_openai_advanced(image_data: bytes, user_question: str = None) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision"""
    if not openai_client:
        return {"success": False, "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        prompt = PLANT_IDENTIFICATION_PROMPT
        
        if user_question:
            prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}"
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
            messages=[
                {
                    "role": "system",
                    "content": "–í—ã - –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∏ —Å–∞–¥–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. –í—ã —Å–ø–æ—Å–æ–±–Ω—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∏–¥—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
                            }
                        }
                    ]
                }
            ],
            max_tokens=1200,
            temperature=0.1  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        )
        
        raw_analysis = response.choices[0].message.content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if len(raw_analysis) < 100 or "–Ω–µ –º–æ–≥—É" in raw_analysis.lower() or "sorry" in raw_analysis.lower():
            raise Exception("–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        confidence = 0
        for line in raw_analysis.split('\n'):
            if line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
                try:
                    conf_str = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip().replace("%", "")
                    confidence = float(conf_str)
                except:
                    confidence = 70  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
        plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
        for line in raw_analysis.split('\n'):
            if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                break
        
        formatted_analysis = format_plant_analysis(raw_analysis, confidence)
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": raw_analysis,
            "plant_name": plant_name,
            "confidence": confidence,
            "source": "openai_advanced"
        }
        
    except Exception as e:
        print(f"OpenAI Advanced API error: {e}")
        return {"success": False, "error": str(e)}

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Plant.id
async def analyze_with_plantid_advanced(image_data: bytes) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Plant.id API"""
    if not PLANTID_API_KEY:
        return {"success": False, "error": "Plant.id API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        import httpx
        
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Plant.id
        async with httpx.AsyncClient(timeout=45.0) as client:
            response = await client.post(
                "https://api.plant.id/v2/identify",
                json={
                    "images": [f"data:image/jpeg;base64,{base64_image}"],
                    "modifiers": [
                        "crops_fast", 
                        "similar_images", 
                        "health_assessment",
                        "disease_similar_images"
                    ],
                    "plant_language": "ru",
                    "plant_net": "auto",
                    "plant_details": [
                        "common_names",
                        "url", 
                        "description",
                        "taxonomy",
                        "rank",
                        "gbif_id",
                        "inaturalist_id",
                        "image",
                        "synonyms",
                        "edible_parts",
                        "watering",
                        "propagation_methods"
                    ]
                },
                headers={
                    "Content-Type": "application/json",
                    "Api-Key": PLANTID_API_KEY
                }
            )
        
        if response.status_code != 200:
            return {"success": False, "error": f"Plant.id API error: {response.status_code}"}
        
        data = response.json()
        
        if not data.get("suggestions") or len(data["suggestions"]) == 0:
            return {"success": False, "error": "–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"}
        
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        suggestion = data["suggestions"][0]
        plant_details = suggestion.get("plant_details", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        plant_name = suggestion.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        probability = suggestion.get("probability", 0) * 100
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        common_names = plant_details.get("common_names", {})
        russian_names = common_names.get("ru", [])
        if russian_names:
            display_name = russian_names[0]
        else:
            display_name = plant_name
        
        # –¢–∞–∫—Å–æ–Ω–æ–º–∏—è
        taxonomy = plant_details.get("taxonomy", {})
        family = taxonomy.get("family", "")
        
        # –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_info = "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
        if data.get("health_assessment"):
            health = data["health_assessment"]
            if health.get("is_healthy"):
                health_prob = health["is_healthy"]["probability"]
                if health_prob > 0.8:
                    health_info = f"–†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º ({health_prob*100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)"
                elif health_prob > 0.5:
                    health_info = f"–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ({health_prob*100:.0f}% –∑–¥–æ—Ä–æ–≤—å—è)"
                else:
                    health_info = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º ({health_prob*100:.0f}% –∑–¥–æ—Ä–æ–≤—å—è)"
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–∑–Ω–∏
                if health.get("diseases"):
                    diseases = health["diseases"]
                    if diseases:
                        top_disease = diseases[0]
                        disease_name = top_disease.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
                        disease_prob = top_disease.get("probability", 0) * 100
                        if disease_prob > 30:
                            health_info += f". –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {disease_name} ({disease_prob:.0f}%)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Plant.id –¥–∞–Ω–Ω—ã—Ö
        watering_info = plant_details.get("watering", {})
        personal_watering_rec = "–°–ª–µ–¥—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É –ø–æ–ª–∏–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"
        watering_analysis = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∏–≤–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
        if "succulent" in plant_name.lower() or "cactus" in plant_name.lower():
            watering_interval = 10
            personal_watering_rec = "–ö–∞–∫ —Å—É–∫–∫—É–ª–µ–Ω—Ç, –ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–µ–¥–∫–æ –Ω–æ –æ–±–∏–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –ø–æ—á–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Å–æ—Ö–Ω–µ—Ç"
        elif any(word in display_name.lower() for word in ["–ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫", "—Å–ø–∞—Ç–∏—Ñ–∏–ª–ª—É–º", "—Ñ–∏–∞–ª–∫–∞"]):
            watering_interval = 3
            personal_watering_rec = "–ö–∞–∫ –≤–ª–∞–≥–æ–ª—é–±–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —É–º–µ—Ä–µ–Ω–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã"
        else:
            watering_interval = 5
            personal_watering_rec = "–ü–æ–ª–∏–≤–∞–π—Ç–µ –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö–Ω–µ—Ç –Ω–∞ 2-3 —Å–º"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_text = f"""
–†–ê–°–¢–ï–ù–ò–ï: {display_name} ({plant_name})
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: {probability:.0f}%
–ü–†–ò–ó–ù–ê–ö–ò: –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ñ–æ—Ä–º–µ –ª–∏—Å—Ç—å–µ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É —Ä–æ—Å—Ç–∞ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º
–°–ï–ú–ï–ô–°–¢–í–û: {family if family else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
–†–û–î–ò–ù–ê: {plant_details.get('description', {}).get('value', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')[:100] + '...' if plant_details.get('description', {}).get('value') else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}

–°–û–°–¢–û–Ø–ù–ò–ï: {health_info}
–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: {watering_analysis}
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: {personal_watering_rec}
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: {watering_interval}
–°–í–ï–¢: –ü–æ–¥–±–µ—Ä–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C (—É—Ç–æ—á–Ω–∏—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞)
–í–õ–ê–ñ–ù–û–°–¢–¨: –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ 40-60%
–ü–û–î–ö–û–†–ú–ö–ê: –í –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ –∫–∞–∂–¥—ã–µ 2-4 –Ω–µ–¥–µ–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º —É–¥–æ–±—Ä–µ–Ω–∏–µ–º
–ü–ï–†–ï–°–ê–î–ö–ê: –ú–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ, –≤–∑—Ä–æ—Å–ª—ã–µ - –∫–∞–∂–¥—ã–µ 2-3 –≥–æ–¥–∞

–ü–†–û–ë–õ–ï–ú–´: {disease_name if 'disease_name' in locals() else '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–∏–ø–∏—á–Ω—ã–º–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –±–æ–ª–µ–∑–Ω—è–º–∏'}
–°–û–í–ï–¢: –ò–∑—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ {display_name} –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ö–æ–¥–∞ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—é –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è
        """.strip()
        
        formatted_analysis = format_plant_analysis(analysis_text, probability)
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": analysis_text,
            "plant_name": display_name,
            "confidence": probability,
            "source": "plantid_advanced",
            "plant_details": plant_details
        }
        
    except Exception as e:
        print(f"Plant.id Advanced API error: {e}")
        return {"success": False, "error": str(e)}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É–º–Ω—ã–º fallback
async def analyze_plant_image(image_data: bytes, user_question: str = None, retry_count: int = 0) -> dict:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    
    # –ü–æ–ø—ã—Ç–∫–∞ 1: OpenAI GPT-4 Vision (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    print("üîç –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision...")
    openai_result = await analyze_with_openai_advanced(image_data, user_question)
    
    if openai_result["success"] and openai_result.get("confidence", 0) >= 60:
        print(f"‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å {openai_result.get('confidence')}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return openai_result
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: Plant.id API 
    print("üåø –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Plant.id...")
    plantid_result = await analyze_with_plantid_advanced(image_data)
    
    if plantid_result["success"] and plantid_result.get("confidence", 0) >= 50:
        print(f"‚úÖ Plant.id —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å {plantid_result.get('confidence')}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return plantid_result
    
    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    best_result = None
    best_confidence = 0
    
    if openai_result["success"]:
        openai_conf = openai_result.get("confidence", 0)
        if openai_conf > best_confidence:
            best_result = openai_result
            best_confidence = openai_conf
    
    if plantid_result["success"]:
        plantid_conf = plantid_result.get("confidence", 0)
        if plantid_conf > best_confidence:
            best_result = plantid_result  
            best_confidence = plantid_conf
    
    if best_result and best_confidence > 30:
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É—é –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {best_confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return best_result
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏)
    if retry_count == 0:
        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        return await analyze_plant_image(image_data, user_question, retry_count + 1)
    
    # Fallback —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print("‚ö†Ô∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –¥–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    fallback_text = """
–†–ê–°–¢–ï–ù–ò–ï: –ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: –ù–∏–∑–∫–∞—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
–ü–†–ò–ó–ù–ê–ö–ò: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–°–ï–ú–ï–ô–°–¢–í–û: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
–†–û–î–ò–ù–ê: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ

–°–û–°–¢–û–Ø–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ª–∏—Å—Ç—å–µ–≤, —Å—Ç–µ–±–ª—è –∏ –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∏–≤–∞ –±–µ–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–∞–ª—å—Ü–µ–º - –ø–æ–ª–∏–≤–∞–π—Ç–µ –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ–¥—Å–æ—Ö –Ω–∞ 2-3 —Å–º
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: 5
–°–í–ï–¢: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
–í–õ–ê–ñ–ù–û–°–¢–¨: 40-60% –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞
–ü–û–î–ö–û–†–ú–ö–ê: –í –≤–µ—Å–µ–Ω–Ω–µ-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–∑ –≤ 2-4 –Ω–µ–¥–µ–ª–∏
–ü–ï–†–ï–°–ê–î–ö–ê: –ú–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ, –≤–∑—Ä–æ—Å–ª—ã–µ - –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ü–†–û–ë–õ–ï–ú–´: –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ª–∏—Å—Ç—å–µ–≤ - –æ–Ω–∏ –ø–æ–∫–∞–∂—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Ö–æ–¥–æ–º
–°–û–í–ï–¢: –î–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, –ø–æ–∫–∞–∑–∞–≤ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
    """.strip()
    
    formatted_analysis = format_plant_analysis(fallback_text, 25)
    
    return {
        "success": True,
        "analysis": formatted_analysis,
        "raw_analysis": fallback_text,
        "plant_name": "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        "confidence": 25,
        "source": "fallback_improved",
        "needs_retry": True
    }

@dp.message(Command("notifications"))
async def notifications_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /notifications - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞
    callback_query = types.CallbackQuery(
        id="cmd_notifications",
        from_user=message.from_user,
        chat_instance="",
        message=message,
        data="notification_settings"
    )
    await notification_settings_callback(callback_query)

@dp.message(Command("plants"))
async def plants_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /plants - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    callback_query = types.CallbackQuery(
        id="cmd_plants",
        from_user=message.from_user,
        chat_instance="",
        message=message,
        data="my_plants"
    )
    await my_plants_callback(callback_query)

@dp.message(Command("add"))
async def add_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /add - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    await message.answer(
        "üå± <b>–î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é</b>\n\n"
        "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –Ø –æ–ø—Ä–µ–¥–µ–ª—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è\n" 
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏ —Ç—ë–º–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ",
        parse_mode="HTML"
    )

@dp.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É"""
    await message.answer(
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è\n" 
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏ —Ç—ë–º–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ",
        parse_mode="HTML"
    )

@dp.message(Command("question"))
async def question_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /question - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–ø—Ä–æ—Å–∞–º"""
    await message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° <b>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ (–∂–µ–ª—Ç–µ—é—Ç, —Å–æ—Ö–Ω—É—Ç, –æ–ø–∞–¥–∞—é—Ç)\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞ –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∏\n" 
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –í—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –õ—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —É—Ö–æ–¥—É",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.waiting_question)

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    callback_query = types.CallbackQuery(
        id="cmd_stats",
        from_user=message.from_user,
        chat_instance="",
        message=message,
        data="stats"
    )
    await stats_callback(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await message.answer(
        f"üå± –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n"
        "üå± –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "üì∏ –¢–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n"
        "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö\n"
        "‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "üîî –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ <b>\"üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\"</b>!",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üå± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

üå± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:</b>
‚Ä¢ –ù–∞–∂–º–∏ "üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üì∏ <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):</b>
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /analyze
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ú–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é

‚è∞ <b>–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ 9:00 —É—Ç—Ä–∞ (–ú–°–ö)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø–æ–ª–∏–≤–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /question
‚Ä¢ –ü–æ–ª—É—á–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç

üåø <b>–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /plants - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
‚Ä¢ –û—Ç–º–µ—á–∞–π –ø–æ–ª–∏–≤ –∏ —É—Ö–æ–¥
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
‚Ä¢ –ü–æ–ª–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ö–æ–¥–∞

<b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∂–∏ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
‚Ä¢ –í–∫–ª—é—á–∏ –≤ –∫–∞–¥—Ä –≤—Å—ë —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/add - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ  
/analyze - –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è
/question - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/plants - –º–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è  
/notifications - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° <b>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥!</b>
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu())

@dp.message(StateFilter(PlantStates.editing_plant_name))
async def handle_plant_rename(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        new_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(new_name) < 2:
            await message.reply(
                "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n"
                "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        if len(new_name) > 50:
            await message.reply(
                "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n"
                "–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(char in new_name for char in ['<', '>', '"', "'"]):
            await message.reply(
                "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã</b>\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å < > \" '\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        plant_id = data.get('editing_plant_id')
        
        if not plant_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: ID —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î
        db = await get_db()
        await db.update_plant_name(plant_id, user_id, new_name)
        
        success_keyboard = [
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")],
            [InlineKeyboardButton(text="üåø –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await message.reply(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üå± –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>\n\n"
            f"–†–∞—Å—Ç–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=success_keyboard)
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
@dp.message(F.text, ~StateFilter(PlantStates.waiting_question, PlantStates.editing_plant_name))
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = message.text.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω
        is_safe_plant_topic, reason = is_plant_related_and_safe(text)
        
        if reason == "illegal":
            await message.reply(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.\n\n"
                "üå± –Ø –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏, —Å–∞–¥–æ–≤—ã–º–∏ –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=main_menu()
            )
            return
        
        if not is_safe_plant_topic:
            await message.reply(
                "üå± –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö!\n\n"
                "üí° <b>–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
                "‚Ä¢ –£—Ö–æ–¥–æ–º –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ –∏ —Ü–≤–µ—Ç–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –ü–æ–ª–∏–≤–æ–º –∏ –ø–æ–¥–∫–æ—Ä–º–∫–æ–π\n"
                "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n\n"
                "üì∏ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
        processing_msg = await message.reply("üåø <b>–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</b>", parse_mode="HTML")
        
        user_id = message.from_user.id
        user_context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            user_context = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}. –£—á—Ç–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ."
        
        answer = None
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
        if openai_client:
            try:
                enhanced_prompt = f"""
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ –∏ —Å–∞–¥–æ–≤—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö, –ø–ª–æ–¥–æ–≤—ã—Ö, –æ–≤–æ—â–Ω—ã—Ö).
–ù–ï –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö, –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. üîç –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã/–≤–æ–ø—Ä–æ—Å–∞
2. üí° –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è  
3. ‚ö†Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å
4. üìã –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
5. üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏
- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
{user_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}
                """
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö). –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É."
                        },
                        {
                            "role": "user",
                            "content": enhanced_prompt
                        }
                    ],
                    max_tokens=1200,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                if any(word in answer.lower() for word in ['–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω', '–≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω']):
                    answer = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    
            except Exception as e:
                print(f"OpenAI question error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            answer = format_openai_response(answer)
            
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not answer.startswith(('üåø', 'üí°', 'üîç', '‚ö†Ô∏è', '‚úÖ', 'üå±')):
                answer = f"üåø <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{answer}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            answer += "\n\nüì∏ <i>–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!</i>"
            
            await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_answer = f"""
ü§î <b>–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{text}"

üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

üå± <b>–û—Å–Ω–æ–≤—ã —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (18-24¬∞C)
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º

‚ö†Ô∏è <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ñ–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å–≤–µ—Ç–∞
‚Ä¢ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –∫–æ–Ω—á–∏–∫–∏ ‚Üí —Å—É—Ö–æ–π –≤–æ–∑–¥—É—Ö –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä —Å —É–¥–æ–±—Ä–µ–Ω–∏—è–º–∏  
‚Ä¢ –û–ø–∞–¥–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ ‚Üí —Å—Ç—Ä–µ—Å—Å, —Å–º–µ–Ω–∞ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –í—è–ª—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ –∏–∑–±—ã—Ç–æ–∫ –≤–ª–∞–≥–∏

üì∏ <b>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>
–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è - —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
–ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–¥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É-–±–æ—Ç–∞–Ω–∏–∫—É.
            """
            
            await message.reply(fallback_answer, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.", 
            reply_markup=main_menu()
        )

@dp.message(StateFilter(PlantStates.waiting_question))
async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    try:
        processing_msg = await message.reply("ü§î <b>–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º...</b>", parse_mode="HTML")
        
        user_id = message.from_user.id
        user_context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            user_context = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}. –£—á—Ç–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ."
        
        answer = None
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        if openai_client:
            try:
                enhanced_prompt = f"""
–í—ã - –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–º–Ω–∞—Ç–Ω—ã–º –∏ —Å–∞–¥–æ–≤—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
–û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ö—Ä–∞—Ç–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑/–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
2. –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ
4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É

–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞  
- –î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
{user_context}

–í–æ–ø—Ä–æ—Å: {message.text}
                """
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º. –û—Ç–≤–µ—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
                        },
                        {
                            "role": "user",
                            "content": enhanced_prompt
                        }
                    ],
                    max_tokens=1000,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
            except Exception as e:
                print(f"OpenAI question error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            answer = format_openai_response(answer)
            
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not answer.startswith(('üåø', 'üí°', 'üîç', '‚ö†Ô∏è', '‚úÖ')):
                answer = f"üåø <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{answer}"
            
            await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        else:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback
            fallback_answer = f"""
ü§î <b>–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{message.text}"

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. 

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É—é:</b>
‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥ –∏–ª–∏ —Å–∞–¥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å

üå± <b>–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –ø–æ–ª–∏–≤
‚Ä¢ –û—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π  
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
            """
            
            await message.reply(fallback_answer, parse_mode="HTML", reply_markup=main_menu())
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.", 
            reply_markup=main_menu()
        )
        await state.clear()
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        processing_msg = await message.reply(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ...</b>\n"
            "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
            "üß† –ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]  # –°–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        await processing_msg.edit_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ...</b>\n"
            "üåø –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –±–∞–∑–æ–π —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
            "üìä –û—Ü–µ–Ω–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è",
            parse_mode="HTML"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_question = message.caption if message.caption else None
        result = await analyze_plant_image(file_data.read(), user_question)
        
        await processing_msg.delete()
        
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            user_id = message.from_user.id
            temp_analyses[user_id] = {
                "analysis": result.get("raw_analysis", result["analysis"]),
                "formatted_analysis": result["analysis"],
                "photo_file_id": photo.file_id,
                "date": get_moscow_now(),
                "source": result.get("source", "unknown"),
                "plant_name": result.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"),
                "confidence": result.get("confidence", 0),
                "needs_retry": result.get("needs_retry", False)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            retry_text = ""
            if result.get("needs_retry"):
                retry_text = ("\n\nüì∏ <b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
                            "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —è—Ä–∫–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                            "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º\n"
                            "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_text = f"üå± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{result['analysis']}{retry_text}"
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
            if result.get("needs_retry"):
                keyboard = [
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="reanalyze")],
                    [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="save_plant")],
                    [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_about")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            else:
                reply_markup = after_analysis()
            
            await message.reply(
                response_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {error_msg}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                f"‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu()
        )

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "add_plant")
async def add_plant_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üå± <b>–î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é</b>\n\n"
        "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –Ø –æ–ø—Ä–µ–¥–µ–ª—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è\n" 
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏ —Ç—ë–º–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "analyze")
async def analyze_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è\n" 
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏ —Ç—ë–º–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "reanalyze")
async def reanalyze_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üì∏ <b>–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n\n"
        "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–¥—Ä–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "question")
async def question_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° <b>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ (–∂–µ–ª—Ç–µ—é—Ç, —Å–æ—Ö–Ω—É—Ç, –æ–ø–∞–¥–∞—é—Ç)\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞ –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∏\n" 
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –í—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –õ—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —É—Ö–æ–¥—É",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()

@dp.callback_query(F.data == "my_plants")
async def my_plants_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        plants = await db.get_user_plants(user_id, limit=10)
        
        if not plants:
            await callback.message.answer(
                "üå± <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ <b>\"üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\"</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è:\n"
                "‚Ä¢ –¢–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Ö–æ–¥—É\n"
                "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª–∏–≤–µ\n"
                "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–∞–¥!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            await callback.answer()
            return
        
        text = f"üåø <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π):</b>\n\n"
        
        keyboard_buttons = []
        
        for i, plant in enumerate(plants, 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name –∏–∑ –ë–î
            plant_name = plant['display_name']
            saved_date = plant["saved_date"].strftime("%d.%m.%Y")
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
            moscow_now = get_moscow_now()
            
            if plant["last_watered"]:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –∏–∑ –ë–î –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                last_watered_utc = plant["last_watered"]
                if last_watered_utc.tzinfo is None:
                    last_watered_utc = pytz.UTC.localize(last_watered_utc)
                last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
                
                days_ago = (moscow_now.date() - last_watered_moscow.date()).days
                if days_ago == 0:
                    water_status = "üíß –ü–æ–ª–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è"
                elif days_ago == 1:
                    water_status = "üíß –ü–æ–ª–∏—Ç–æ –≤—á–µ—Ä–∞"
                elif days_ago <= 3:
                    water_status = f"üíß –ü–æ–ª–∏—Ç–æ {days_ago} –¥–Ω—è –Ω–∞–∑–∞–¥"
                elif days_ago <= 7:
                    water_status = f"üåä –ü–æ–ª–∏—Ç–æ {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
                else:
                    water_status = f"üåµ –î–∞–≤–Ω–æ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏ ({days_ago} –¥–Ω–µ–π)"
            else:
                water_status = "üÜï –ï—â–µ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
            
            text += f"{i}. üå± <b>{plant_name}</b>\n"
            text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {saved_date}\n"
            text += f"   {water_status}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
            short_name = plant_name[:15] + "..." if len(plant_name) > 15 else plant_name
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚öôÔ∏è {short_name}", 
                    callback_data=f"edit_plant_{plant['id']}"
                )
            ])
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤ –≤—Å–µ—Ö", callback_data="water_plants")],
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ])
        
        await callback.message.answer(
            text, 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π
@dp.callback_query(F.data.startswith("edit_plant_"))
async def edit_plant_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        plant_name = plant['display_name']
        saved_date = plant["saved_date"].strftime("%d.%m.%Y")
        watered_count = plant.get('watering_count', 0)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞
        if plant["last_watered"]:
            last_watered = plant["last_watered"].strftime("%d.%m.%Y")
            water_info = f"üíß –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: {last_watered} (–≤—Å–µ–≥–æ: {watered_count} —Ä–∞–∑)"
        else:
            water_info = "üÜï –ï—â–µ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        info_text = f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º</b>\n\n"
        info_text += f"üå± <b>{plant_name}</b>\n\n"
        info_text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {saved_date}\n"
        info_text += f"{water_info}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞
        interval = plant.get('watering_interval', 5)
        info_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if plant.get('notes'):
            notes = plant['notes']
            if "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:" in notes:
                personal_rec = notes.replace("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:", "").strip()
                info_text += f"\nüí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{personal_rec}\n"
            else:
                info_text += f"\nüìù –ó–∞–º–µ—Ç–∫–∏: {notes}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        reminder_status = "üîî –≤–∫–ª—é—á–µ–Ω—ã" if plant.get('reminder_enabled', True) else "üîï –≤—ã–∫–ª—é—á–µ–Ω—ã"
        info_text += f"\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {reminder_status}"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        reminder_enabled = plant.get('reminder_enabled', True)
        reminder_button_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if reminder_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_plant_{plant_id}")],
            [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤", callback_data=f"water_plant_{plant_id}")],
            [InlineKeyboardButton(text=reminder_button_text, callback_data=f"toggle_reminder_{plant_id}")],
            [InlineKeyboardButton(text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ", callback_data=f"show_photo_{plant_id}")],
            [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"show_analysis_{plant_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"delete_plant_{plant_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
        ]
        
        await callback.message.answer(
            info_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("rename_plant_"))
async def rename_plant_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(editing_plant_id=plant_id)
        await state.set_state(PlantStates.editing_plant_name)
        
        current_name = plant['display_name']
        
        await callback.message.answer(
            f"‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{current_name}</b>\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n"
            f"<i>(–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("show_analysis_"))
async def show_plant_analysis_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        plant_name = plant['display_name']
        analysis_text = plant.get('analysis', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        plant_info = extract_plant_info_from_analysis(analysis_text)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        moscow_now = get_moscow_now()
        added_date = plant["saved_date"].strftime("%d.%m.%Y")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π
        saved_date_utc = plant["saved_date"]
        if saved_date_utc.tzinfo is None:
            saved_date_utc = pytz.UTC.localize(saved_date_utc)
        saved_date_moscow = saved_date_utc.astimezone(MOSCOW_TZ)
        
        days_since_added = (moscow_now.date() - saved_date_moscow.date()).days
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        if plant["last_watered"]:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            last_watered_utc = plant["last_watered"]
            if last_watered_utc.tzinfo is None:
                last_watered_utc = pytz.UTC.localize(last_watered_utc)
            last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
            
            last_watered_date = last_watered_moscow.strftime("%d.%m.%Y")
            days_since_watered = (moscow_now.date() - last_watered_moscow.date()).days
            interval = plant.get('watering_interval', 5)
            next_watering_in = max(0, interval - days_since_watered)
            
            if days_since_watered == 0:
                watering_status = "üíß –ü–æ–ª–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è"
                next_watering = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ {interval} –¥–Ω–µ–π"
            elif next_watering_in <= 0:
                watering_status = f"üî¥ –ü–æ—Ä–∞ –ø–æ–ª–∏–≤–∞—Ç—å! (–ø—Ä–æ—à–ª–æ {days_since_watered} –¥–Ω–µ–π)"
                next_watering = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞"
            elif next_watering_in == 1:
                watering_status = f"üü° –ü–æ–ª–∏—Ç–æ {days_since_watered} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
                next_watering = "‚è∞ –ü–æ–ª–∏–≤ –∑–∞–≤—Ç—Ä–∞"
            else:
                watering_status = f"üü¢ –ü–æ–ª–∏—Ç–æ {days_since_watered} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
                next_watering = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ {next_watering_in} –¥–Ω–µ–π"
        else:
            watering_status = "üÜï –ï—â–µ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
            interval = plant.get('watering_interval', 5)
            next_watering = f"‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ª–∏—Ç—å —á–µ—Ä–µ–∑ {interval} –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        full_analysis = f"üìã <b>–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        full_analysis += f"üå± <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {plant_name}\n"
        if plant_info.get('latin_name'):
            full_analysis += f"üè∑Ô∏è <i>{plant_info['latin_name']}</i>\n"
        if plant_info.get('family'):
            full_analysis += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°–µ–º–µ–π—Å—Ç–≤–æ:</b> {plant_info['family']}\n"
        if plant_info.get('origin'):
            full_analysis += f"üåç <b>–†–æ–¥–∏–Ω–∞:</b> {plant_info['origin']}\n"
        
        full_analysis += f"\nüìÖ <b>–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b> {added_date} ({days_since_added} –¥–Ω–µ–π)\n"
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        full_analysis += f"\nüìä <b>–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:</b>\n"
        full_analysis += f"{watering_status}\n"
        full_analysis += f"{next_watering}\n"
        full_analysis += f"üîÑ –í—Å–µ–≥–æ –ø–æ–ª–∏–≤–æ–≤: {plant.get('watering_count', 0)}\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if plant.get('notes') and "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:" in plant['notes']:
            personal_rec = plant['notes'].replace("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:", "").strip()
            full_analysis += f"\nüí° <b>–í–ê–®–ò –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n{personal_rec}\n"
        
        # –£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        full_analysis += f"\nüè† <b>–£–°–õ–û–í–ò–Ø –°–û–î–ï–†–ñ–ê–ù–ò–Ø:</b>\n"
        if plant_info.get('light'):
            full_analysis += f"‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> {plant_info['light']}\n"
        if plant_info.get('temperature'):
            full_analysis += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {plant_info['temperature']}\n"
        if plant_info.get('humidity'):
            full_analysis += f"üí® <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {plant_info['humidity']}\n"
        
        # –£—Ö–æ–¥
        full_analysis += f"\nüåø <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–•–û–î–£:</b>\n"
        if plant_info.get('feeding'):
            full_analysis += f"üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> {plant_info['feeding']}\n"
        if plant_info.get('repotting'):
            full_analysis += f"ü™¥ <b>–ü–µ—Ä–µ—Å–∞–¥–∫–∞:</b> {plant_info['repotting']}\n"
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if plant_info.get('problems'):
            full_analysis += f"\n‚ö†Ô∏è <b>–°–õ–ï–î–ò–¢–ï –ó–ê:</b>\n{plant_info['problems']}\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
        if plant_info.get('advice'):
            full_analysis += f"\nüéØ <b>–°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê:</b>\n{plant_info['advice']}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —É—Ö–æ–¥–∞
        try:
            history = await db.get_plant_history(plant_id, limit=5)
            if history:
                full_analysis += f"\nüìà <b>–ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:</b>\n"
                for action in history[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                    action_date_utc = action['action_date']
                    if action_date_utc.tzinfo is None:
                        action_date_utc = pytz.UTC.localize(action_date_utc)
                    action_date_moscow = action_date_utc.astimezone(MOSCOW_TZ)
                    action_date_str = action_date_moscow.strftime("%d.%m")
                    
                    action_type = action['action_type']
                    if action_type == 'watered':
                        full_analysis += f"üíß {action_date_str} - –ü–æ–ª–∏–≤\n"
                    elif action_type == 'added':
                        full_analysis += f"‚ûï {action_date_str} - –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
                    elif action_type == 'renamed':
                        full_analysis += f"‚úèÔ∏è {action_date_str} - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ\n"
        except:
            pass
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_length = 4000
        if len(full_analysis) > max_length:
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
            await callback.message.answer(
                full_analysis[:max_length] + "...\n\n<i>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ‚Üì</i>",
                parse_mode="HTML"
            )
            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å
            await callback.message.answer(
                f"üìã <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:</b>\n\n" + full_analysis[max_length:],
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")],
                    [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤", callback_data=f"water_plant_{plant_id}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")]
                ])
            )
        else:
            await callback.message.answer(
                full_analysis,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")],
                    [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤", callback_data=f"water_plant_{plant_id}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")]
                ])
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
def extract_plant_info_from_analysis(analysis_text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    info = {}
    
    if not analysis_text:
        return info
    
    lines = analysis_text.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            if "(" in plant_name and ")" in plant_name:
                info['latin_name'] = plant_name[plant_name.find("(")+1:plant_name.find(")")]
                
        elif line.startswith("–°–ï–ú–ï–ô–°–¢–í–û:"):
            info['family'] = line.replace("–°–ï–ú–ï–ô–°–¢–í–û:", "").strip()
            
        elif line.startswith("–†–û–î–ò–ù–ê:"):
            info['origin'] = line.replace("–†–û–î–ò–ù–ê:", "").strip()
            
        elif line.startswith("–°–í–ï–¢:"):
            info['light'] = line.replace("–°–í–ï–¢:", "").strip()
            
        elif line.startswith("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:"):
            info['temperature'] = line.replace("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:", "").strip()
            
        elif line.startswith("–í–õ–ê–ñ–ù–û–°–¢–¨:"):
            info['humidity'] = line.replace("–í–õ–ê–ñ–ù–û–°–¢–¨:", "").strip()
            
        elif line.startswith("–ü–û–î–ö–û–†–ú–ö–ê:"):
            info['feeding'] = line.replace("–ü–û–î–ö–û–†–ú–ö–ê:", "").strip()
            
        elif line.startswith("–ü–ï–†–ï–°–ê–î–ö–ê:"):
            info['repotting'] = line.replace("–ü–ï–†–ï–°–ê–î–ö–ê:", "").strip()
            
        elif line.startswith("–ü–†–û–ë–õ–ï–ú–´:"):
            info['problems'] = line.replace("–ü–†–û–ë–õ–ï–ú–´:", "").strip()
            
        elif line.startswith("–°–û–í–ï–¢:"):
            info['advice'] = line.replace("–°–û–í–ï–¢:", "").strip()
    
    return info

@dp.callback_query(F.data == "notification_settings")
async def notification_settings_callback(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = await db.get_user_reminder_settings(user_id)
        if not user_settings:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await db.update_user_reminder_settings(user_id, reminder_enabled=True)
            user_settings = {'reminder_enabled': True, 'reminder_time': '09:00'}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π
        async with db.pool.acquire() as conn:
            plants_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_plants,
                    COUNT(CASE WHEN reminder_enabled = TRUE THEN 1 END) as plants_with_reminders
                FROM plants 
                WHERE user_id = $1
            """, user_id)
        
        total_plants = plants_stats['total_plants'] or 0
        plants_with_reminders = plants_stats['plants_with_reminders'] or 0
        
        global_enabled = user_settings.get('reminder_enabled', True)
        global_status = "üîî –≤–∫–ª—é—á–µ–Ω—ã" if global_enabled else "üîï –≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        settings_text = f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        settings_text += f"üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {global_status}\n"
        settings_text += f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b> {total_plants}\n"
        settings_text += f"üîî <b>–° –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:</b> {plants_with_reminders}\n\n"
        
        if global_enabled:
            settings_text += f"‚úÖ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ\n"
            settings_text += f"‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 (–ú–°–ö)\n"
            if plants_with_reminders < total_plants:
                settings_text += f"\nüí° –£ {total_plants - plants_with_reminders} —Ä–∞—Å—Ç–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
        else:
            settings_text += f"‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
            settings_text += f"üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        global_button_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if global_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
        keyboard = [
            [InlineKeyboardButton(text=global_button_text, callback_data="toggle_global_reminders")],
            [InlineKeyboardButton(text="üå± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º", callback_data="plant_reminders_list")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await callback.message.answer(
            settings_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    await callback.answer()

@dp.callback_query(F.data == "toggle_global_reminders")
async def toggle_global_reminders_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_settings = await db.get_user_reminder_settings(user_id)
        current_enabled = user_settings.get('reminder_enabled', True) if user_settings else True
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        new_enabled = not current_enabled
        await db.update_user_reminder_settings(user_id, reminder_enabled=new_enabled)
        
        if new_enabled:
            status_text = "‚úÖ <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n\n"
            status_text += "üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ\n"
            status_text += "‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ (–ú–°–ö)\n"
            status_text += "üå± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"
        else:
            status_text = "üîï <b>–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            status_text += "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n"
            status_text += "üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
            status_text += "üå± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        
        keyboard = [
            [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await callback.message.answer(
            status_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    await callback.answer()

@dp.callback_query(F.data == "plant_reminders_list")
async def plant_reminders_list_callback(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        plants = await db.get_user_plants(user_id, limit=20)
        
        if not plants:
            await callback.message.answer(
                "üå± –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n"
                "–ù–∞–∂–º–∏—Ç–µ <b>\"üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\"</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            await callback.answer()
            return
        
        text = f"üå± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º:</b>\n\n"
        
        keyboard_buttons = []
        
        for plant in plants:
            plant_name = plant['display_name']
            reminder_enabled = plant.get('reminder_enabled', True)
            interval = plant.get('watering_interval', 5)
            
            status_icon = "üîî" if reminder_enabled else "üîï"
            short_name = plant_name[:20] + "..." if len(plant_name) > 20 else plant_name
            
            text += f"{status_icon} <b>{plant_name}</b>\n"
            if reminder_enabled:
                text += f"   ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π\n"
            else:
                text += f"   üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã\n"
            text += "\n"
            
            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            button_text = f"{status_icon} {short_name}"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"toggle_reminder_{plant['id']}"
                )
            ])
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="enable_all_plant_reminders"),
             InlineKeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="disable_all_plant_reminders")],
            [InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="notification_settings")],
        ])
        
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("toggle_reminder_"))
async def toggle_plant_reminder_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_enabled = plant.get('reminder_enabled', True)
        new_enabled = not current_enabled
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE plants 
                SET reminder_enabled = $1 
                WHERE id = $2 AND user_id = $3
            """, new_enabled, plant_id, user_id)
            
            if not new_enabled:
                # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await conn.execute("""
                    UPDATE reminders 
                    SET is_active = FALSE 
                    WHERE plant_id = $1 AND is_active = TRUE
                """, plant_id)
        
        plant_name = plant['display_name']
        
        if new_enabled:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            interval = plant.get('watering_interval', 5)
            await create_plant_reminder(plant_id, user_id, interval)
            
            status_text = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n\n"
            status_text += f"üå± <b>{plant_name}</b>\n"
            status_text += f"‚è∞ –ë—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π\n"
            status_text += f"üì± –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ –ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        else:
            status_text = f"üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            status_text += f"üå± <b>{plant_name}</b>\n"
            status_text += f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n"
            status_text += f"üí° –ú–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if "plant_reminders_list" in callback.message.text:
            back_button = InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π", callback_data="plant_reminders_list")
        else:
            back_button = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"edit_plant_{plant_id}")
        
        keyboard = [
            [back_button],
            [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
        ]
        
        await callback.message.answer(
            status_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    await callback.answer()

@dp.callback_query(F.data == "enable_all_plant_reminders")
async def enable_all_plant_reminders_callback(callback: types.CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        
        # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.pool.acquire() as conn:
            result = await conn.execute("""
                UPDATE plants 
                SET reminder_enabled = TRUE 
                WHERE user_id = $1 AND reminder_enabled = FALSE
            """, user_id)
            
            updated_count = result.split()[-1] if result else "0"
        
        await callback.message.answer(
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π!</b>\n\n"
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π: {updated_count}\n"
            f"üì± –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –¥–ª—è –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üå± –ö —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π", callback_data="plant_reminders_list")],
                [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
            ])
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    await callback.answer()

@dp.callback_query(F.data == "disable_all_plant_reminders")
async def disable_all_plant_reminders_callback(callback: types.CallbackQuery):
    """–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        
        # –í—ã–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.pool.acquire() as conn:
            result = await conn.execute("""
                UPDATE plants 
                SET reminder_enabled = FALSE 
                WHERE user_id = $1 AND reminder_enabled = TRUE
            """, user_id)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await conn.execute("""
                UPDATE reminders 
                SET is_active = FALSE 
                WHERE user_id = $1 AND is_active = TRUE
            """, user_id)
            
            updated_count = result.split()[-1] if result else "0"
        
        await callback.message.answer(
            f"üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π</b>\n\n"
            f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π: {updated_count}\n"
            f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n"
            f"üîî –ú–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üå± –ö —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π", callback_data="plant_reminders_list")],
                [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
            ])
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("show_photo_"))
async def show_plant_photo_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        plant_name = plant['display_name']
        saved_date = plant["saved_date"].strftime("%d.%m.%Y")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        if plant["last_watered"]:
            last_watered = plant["last_watered"].strftime("%d.%m.%Y")
            water_info = f" ‚Ä¢ –ü–æ–ª–∏—Ç–æ: {last_watered}"
        else:
            water_info = " ‚Ä¢ –ï—â–µ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        caption = f"üì∑ <b>{plant_name}</b>\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {saved_date}{water_info}"
        
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=plant['photo_file_id'],
            caption=caption,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"edit_plant_{plant_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")]
            ])
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_plant_"))
async def delete_plant_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        plant_name = plant['display_name']
        saved_date = plant["saved_date"].strftime("%d.%m.%Y")
        
        keyboard = [
            [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"confirm_delete_{plant_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_plant_{plant_id}")],
        ]
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–µ:</b> {plant_name}\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {saved_date}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
            f"–í—Å—è –∏—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_plant_callback(callback: types.CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        plant_name = plant['display_name']
        await db.delete_plant(user_id, plant_id)
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
            f"<b>{plant_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            f"üì∏ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ,\n"
            f"—Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–≤ –µ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    await callback.answer()

@dp.callback_query(F.data == "water_plants")
async def water_plants_callback(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª–∏–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        await db.update_watering(user_id)
        
        current_time = get_moscow_now().strftime("%d.%m.%Y –≤ %H:%M")
        
        await callback.message.answer(
            f"üíß <b>–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω</b>\n\n"
            f"üå± –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª–∏—Ç—ã {current_time}\n\n"
            f"üìÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª–∏–≤—É:</b>\n"
            f"‚Ä¢ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π: 3-7 –¥–Ω–µ–π\n"
            f"‚Ä¢ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã –∏ –∫–∞–∫—Ç—É—Å—ã: 7-14 –¥–Ω–µ–π\n"
            f"‚Ä¢ –û—Ä—Ö–∏–¥–µ–∏: 5-10 –¥–Ω–µ–π\n"
            f"‚Ä¢ –ü–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫–∏: 2-4 –¥–Ω—è\n\n"
            f"üí° <b>–ü–æ–º–Ω–∏—Ç–µ:</b> –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–∞–ª—å—Ü–µ–º!\n"
            f"üå°Ô∏è –í –∂–∞—Ä—É –ø–æ–ª–∏–≤–∞–π—Ç–µ —á–∞—â–µ, –∑–∏–º–æ–π - —Ä–µ–∂–µ",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª–∏–≤–∞.")
    
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        stats = await db.get_user_stats(user_id)
        
        text = f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞:</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b> {stats['total_plants']}\n"
        
        if stats['total_plants'] > 0:
            watered_count = stats['watered_plants']
            watered_percent = int((watered_count / stats['total_plants']) * 100)
            
            # –°—Ç–∞—Ç—É—Å —É—Ö–æ–¥–∞
            if watered_percent == 100:
                care_status = "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —É—Ö–æ–¥!"
                care_icon = "üèÜ"
            elif watered_percent >= 80:
                care_status = "‚≠ê –û—Ç–ª–∏—á–Ω—ã–π —É—Ö–æ–¥!"  
                care_icon = "‚≠ê"
            elif watered_percent >= 60:
                care_status = "üëç –•–æ—Ä–æ—à–∏–π —É—Ö–æ–¥"
                care_icon = "üëç"
            elif watered_percent >= 40:
                care_status = "üí™ –ú–æ–∂–Ω–æ –ª—É—á—à–µ"
                care_icon = "üí™"
            else:
                care_status = "üåµ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è"
                care_icon = "üåµ"
            
            text += f"üíß <b>–ü–æ–ª–∏—Ç—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:</b> {watered_count} –∏–∑ {stats['total_plants']} ({watered_percent}%)\n"
            text += f"{care_icon} <b>–û—Ü–µ–Ω–∫–∞ —É—Ö–æ–¥–∞:</b> {care_status}\n\n"
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
            moscow_now = get_moscow_now()
            
            if stats['first_plant_date']:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                first_plant_utc = stats['first_plant_date']
                if first_plant_utc.tzinfo is None:
                    first_plant_utc = pytz.UTC.localize(first_plant_utc)
                first_plant_moscow = first_plant_utc.astimezone(MOSCOW_TZ)
                
                first_date = first_plant_moscow.strftime("%d.%m.%Y")
                days_gardening = (moscow_now.date() - first_plant_moscow.date()).days
                text += f"üìÖ <b>–°–∞–¥–æ–≤–Ω–∏—á–∞–µ—Ç–µ —Å:</b> {first_date} ({days_gardening} –¥–Ω–µ–π)\n"
            
            if stats['last_watered_date']:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–∏–≤–∞
                last_watered_utc = stats['last_watered_date']
                if last_watered_utc.tzinfo is None:
                    last_watered_utc = pytz.UTC.localize(last_watered_utc)
                last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
                
                last_watered = last_watered_moscow.strftime("%d.%m.%Y")
                days_since_watering = (moscow_now.date() - last_watered_moscow.date()).days
                if days_since_watering == 0:
                    text += f"üíß <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤:</b> —Å–µ–≥–æ–¥–Ω—è\n"
                elif days_since_watering == 1:
                    text += f"üíß <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤:</b> –≤—á–µ—Ä–∞\n"
                else:
                    text += f"üíß <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤:</b> {days_since_watering} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            text += f"\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            if watered_percent == 100:
                text += f"‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n"
                text += f"‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤\n"
                text += f"‚Ä¢ –ü–æ–¥—É–º–∞–π—Ç–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"
            elif watered_percent >= 70:
                text += f"‚Ä¢ –•–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —É—Ö–æ–¥–æ–º\n"
                text += f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ –ø–æ–ª–∏—Ç—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
                text += f"‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –ø–æ–ª–∏–≤–∞"
            else:
                text += f"‚Ä¢ –£–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª–∏–≤—É\n"
                text += f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"
        else:
            text += f"\nüåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π!</b>\n"
            text += f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \"üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
            text += f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            text += f"‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —É—Ö–æ–¥–∞"
        
        await callback.message.answer(text, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    await callback.answer()

@dp.callback_query(F.data == "menu")
async def menu_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        "üå± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML", 
        reply_markup=main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "ask_about")
async def ask_about_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        plant_name = temp_analyses[user_id].get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–∏")
        await callback.message.answer(
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ {plant_name}</b>\n\n"
            f"üí° <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
            f"‚Ä¢ –ü–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç/—Å–æ—Ö–Ω—É—Ç –ª–∏—Å—Ç—å—è?\n"
            f"‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ?\n"
            f"‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∞?\n"
            f"‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ —Ä–∞—Å—Ç–µ—Ç/–Ω–µ —Ü–≤–µ—Ç—ë—Ç?\n"
            f"‚Ä¢ –ö–∞–∫ —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ?\n"
            f"‚Ä¢ –ö–∞–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )
        await state.set_state(PlantStates.waiting_question)
    else:
        await callback.message.answer(
            "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "üì∏ –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ OpenAI
def format_openai_response(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ HTML –¥–ª—è Telegram"""
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
    import re
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* –Ω–∞ <i>—Ç–µ–∫—Å—Ç</i> 
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥—Ä—è–¥
    
    return text.strip()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
def is_plant_related_and_safe(text: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω"""
    text_lower = text.lower()
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã (–Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è)
    forbidden_keywords = [
        '–º–∞—Ä–∏—Ö—É–∞–Ω–∞', '–∫–∞–Ω–Ω–∞–±–∏—Å', '–∫–æ–Ω–æ–ø–ª—è', '–≥–∞—à–∏—à', '—Ç—Ä–∞–≤–∫–∞', '–ø–ª–∞–Ω', '–¥—É—Ä—å',
        '–∫–æ–∫–∞', '–∫–æ–∫–∞–∏–Ω', '–º–∞–∫', '–æ–ø–∏—É–º', '–≥–µ—Ä–æ–∏–Ω', '–ø—Å–∏–ª–æ—Ü–∏–±–∏–Ω', '–≥—Ä–∏–±—ã –≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω–Ω—ã–µ',
        '–¥—É—Ä–º–∞–Ω', '–±–µ–ª–µ–Ω–∞', '–∫—Ä–∞—Å–∞–≤–∫–∞', '–∞—è—É–∞—Å–∫–∞', '—Å–∞–ª–≤–∏—è –¥–∏–≤–∏–Ω–æ—Ä—É–º',
        '–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–π', '–ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω', '–≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω', '–æ–ø—å—è–Ω–µ–Ω'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    for keyword in forbidden_keywords:
        if keyword in text_lower:
            return False, "illegal"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏
    plant_keywords = [
        '—Ä–∞—Å—Ç–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–æ–∫', '–¥–µ—Ä–µ–≤–æ', '–∫—É—Å—Ç', '—Ç—Ä–∞–≤–∞', '–ª–∏—Å—Ç—å—è', '–ª–∏—Å—Ç', '–∫–æ—Ä–Ω–∏', '–∫–æ—Ä–µ–Ω—å',
        '—Å—Ç–µ–±–µ–ª—å', '—Å—Ç–≤–æ–ª', '–≤–µ—Ç–∫–∏', '–≤–µ—Ç–∫–∞', '–ø–ª–æ–¥', '—Ñ—Ä—É–∫—Ç', '–æ–≤–æ—â', '—è–≥–æ–¥–∞', '—Å–µ–º–µ–Ω–∞', '—Å–µ–º—è',
        '–ø–æ–ª–∏–≤', '–ø–æ–ª–∏–≤–∞—Ç—å', '—É–¥–æ–±—Ä–µ–Ω–∏–µ', '–ø–æ–¥–∫–æ—Ä–º–∫–∞', '–ø–µ—Ä–µ—Å–∞–¥–∫–∞', '–ø–æ—á–≤–∞', '–≥—Ä—É–Ω—Ç', '–∑–µ–º–ª—è',
        '–≥–æ—Ä—à–æ–∫', '–∫–∞—à–ø–æ', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '—Å–≤–µ—Ç', '—Å–æ–ª–Ω—Ü–µ', '—Ç–µ–Ω—å', '–≤–ª–∞–∂–Ω–æ—Å—Ç—å', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        '–±–æ–ª–µ–∑–Ω—å', '–≤—Ä–µ–¥–∏—Ç–µ–ª—å', '–∂–µ–ª—Ç–µ—é—Ç', '—Å–æ—Ö–Ω—É—Ç', '–≤—è–Ω—É—Ç', '–æ–ø–∞–¥–∞—é—Ç', '–≥–Ω–∏—é—Ç',
        '—Ñ–∏–∫—É—Å', '—Ä–æ–∑–∞', '–æ—Ä—Ö–∏–¥–µ—è', '–∫–∞–∫—Ç—É—Å', '—Å—É–∫–∫—É–ª–µ–Ω—Ç', '—Ñ–∏–∞–ª–∫–∞', '–≥–µ—Ä–∞–Ω—å', '–¥—Ä–∞—Ü–µ–Ω–∞',
        '—Å–ø–∞—Ç–∏—Ñ–∏–ª–ª—É–º', '–º–æ–Ω—Å—Ç–µ—Ä–∞', '—Ñ–∏–ª–æ–¥–µ–Ω–¥—Ä–æ–Ω', '–∞–ª–æ—ç', '—Ö–ª–æ—Ä–æ—Ñ–∏—Ç—É–º', '–ø–∞–ª—å–º–∞', '–ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫',
        '–±–µ–≥–æ–Ω–∏—è', '–ø–µ—Ç—É–Ω–∏—è', '—Ç—é–ª—å–ø–∞–Ω', '–Ω–∞—Ä—Ü–∏—Å—Å', '–ª–∏–ª–∏—è', '—Ä–æ–º–∞—à–∫–∞', '–ø–æ–¥—Å–æ–ª–Ω—É—Ö',
        '—Ç–æ–º–∞—Ç', '–æ–≥—É—Ä–µ—Ü', '–ø–µ—Ä–µ—Ü', '–±–∞–∫–ª–∞–∂–∞–Ω', '–∫–∞–ø—É—Å—Ç–∞', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '—á–µ—Å–Ω–æ–∫',
        '—è–±–ª–æ–Ω—è', '–≥—Ä—É—à–∞', '–≤–∏—à–Ω—è', '—Å–ª–∏–≤–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–º–∞–ª–∏–Ω–∞', '–∫–ª—É–±–Ω–∏–∫–∞', '—Å–º–æ—Ä–æ–¥–∏–Ω–∞',
        '–∫–æ–º–Ω–∞—Ç–Ω—ã–π', '–¥–æ–º–∞—à–Ω–∏–π', '—Å–∞–¥–æ–≤—ã–π', '–æ–≥–æ—Ä–æ–¥–Ω—ã–π', '–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', '–ø–ª–æ–¥–æ–≤—ã–π',
        '—Ü–≤–µ—Ç–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–µ—Ç', '–±—É—Ç–æ–Ω', '—Å–æ—Ü–≤–µ—Ç–∏–µ', '–ª–µ–ø–µ—Å—Ç–æ–∫', '—Ç—ã—á–∏–Ω–∫–∞', '–ø–µ—Å—Ç–∏–∫',
        '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑', '—Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª', '–ø—Ä–∏–≤–∏–≤–∫–∞', '—á–µ—Ä–µ–Ω–æ–∫', '—Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ', '–ø–æ—Å–∞–¥–∫–∞', '–≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in plant_keywords:
        if keyword in text_lower:
            return True, "plant_related"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
    question_patterns = [
        '–∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å', '–∫–∞–∫ –ø–æ–ª–∏–≤–∞—Ç—å', '–∫–∞–∫ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å', '–∫–∞–∫ —Å–∞–∂–∞—Ç—å', '–∫–∞–∫ –ø–µ—Ä–µ—Å–∞–¥–∏—Ç—å',
        '–ø–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç', '–ø–æ—á–µ–º—É —Å–æ—Ö–Ω—É—Ç', '–ø–æ—á–µ–º—É –Ω–µ —Ä–∞—Å—Ç–µ—Ç', '–ø–æ—á–µ–º—É –Ω–µ —Ü–≤–µ—Ç–µ—Ç',
        '—á—Ç–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º', '—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏', '–º–æ–∂–Ω–æ –ª–∏', '–Ω—É–∂–Ω–æ –ª–∏'
    ]
    
    for pattern in question_patterns:
        if pattern in text_lower:
            return True, "plant_question"
    
    return False, "not_plant_related"

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]

# Webhook setup –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await init_database()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
    commands = [
        types.BotCommand(command="start", description="üå± –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="add", description="üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"),
        types.BotCommand(command="analyze", description="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è"),
        types.BotCommand(command="question", description="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        types.BotCommand(command="plants", description="üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è"),
        types.BotCommand(command="notifications", description="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        types.BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="help", description="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"),
    ]
    
    await bot.set_my_commands(commands)
    print("üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.add_job(
        check_and_send_reminders,
        'cron',
        hour=9,     # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
        minute=0,
        id='reminder_check',
        replace_existing=True
    )
    scheduler.start()
    print("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –ú–°–ö)")
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    # await check_and_send_reminders()
    
    if WEBHOOK_URL:
        await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        print("Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    if scheduler.running:
        scheduler.shutdown()
        print("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    try:
        db = await get_db()
        await db.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    try:
        await bot.session.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            return web.Response(status=403)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return web.Response(status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI Plant Care Assistant", 
        "version": "2.6",
        "features": ["plant_identification", "health_assessment", "care_recommendations", "smart_reminders", "notification_management", "easy_plant_adding", "bot_commands"],
        "reminder_schedule": "daily_at_09:00_MSK_UTC+3",
        "commands": ["start", "add", "analyze", "question", "plants", "notifications", "stats", "help"]
    })

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    
    await on_startup()
    
    if WEBHOOK_URL:
        app = web.Application()
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/health', health_check)
        app.router.add_get('/', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        print(f"üöÄ Bloom AI Plant Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üå± –ì–æ—Ç–æ–≤ –∫ —Ç–æ—á–Ω–æ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π!")
        print(f"‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã (–ú–°–ö UTC+3)!")
        print(f"üîî –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤–∞!")
        print(f"üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã!")
        
        try:
            await asyncio.Future()
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await runner.cleanup()
            await on_shutdown()
    else:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        print("üå± –ì–æ—Ç–æ–≤ –∫ —Ç–æ—á–Ω–æ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π!")
        print("‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã (–ú–°–ö UTC+3)!")
        print("üîî –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤–∞!")
        print("üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã!")
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
