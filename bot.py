import asyncio
import os
import logging
from datetime import datetime, timedelta
import json
import base64
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiohttp import web
from openai import AsyncOpenAI
from PIL import Image
from database import init_database, get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤ (–¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
temp_analyses = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PlantStates(StatesGroup):
    waiting_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="analyze")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def after_analysis():
    keyboard = [
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_plant")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data="ask_about")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
def format_plant_analysis(raw_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    
    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
    formatted = ""
    
    for line in lines:
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            formatted += f"üåø <b>{plant_name}</b>\n\n"
            
        elif line.startswith("–°–û–°–¢–û–Ø–ù–ò–ï:"):
            condition = line.replace("–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip()
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if any(word in condition.lower() for word in ["–∑–¥–æ—Ä–æ–≤", "—Ö–æ—Ä–æ—à", "–Ω–æ—Ä–º", "–æ—Ç–ª–∏—á–Ω"]):
                icon = "‚úÖ"
            elif any(word in condition.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–±–æ–ª–µ–Ω", "–ø–ª–æ—Ö"]):
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ÑπÔ∏è"
            formatted += f"{icon} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition}\n\n"
            
        elif line.startswith("–ü–û–õ–ò–í:"):
            watering = line.replace("–ü–û–õ–ò–í:", "").strip()
            formatted += f"üíß <b>–ü–æ–ª–∏–≤:</b> {watering}\n"
            
        elif line.startswith("–°–í–ï–¢:"):
            light = line.replace("–°–í–ï–¢:", "").strip()
            formatted += f"‚òÄÔ∏è <b>–û—Å–≤–µ—â–µ–Ω–∏–µ:</b> {light}\n"
            
        elif line.startswith("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:"):
            temp = line.replace("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:", "").strip()
            formatted += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}\n"
            
        elif line.startswith("–°–û–í–ï–¢:"):
            advice = line.replace("–°–û–í–ï–¢:", "").strip()
            formatted += f"\nüí° <b>–°–æ–≤–µ—Ç:</b> {advice}"
    
    # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if len(formatted) < 50:
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        plant_name = "–†–∞—Å—Ç–µ–Ω–∏–µ"
        plant_keywords = ["–æ—Ä—Ö–∏–¥–µ—è", "—Ñ–∏–∫—É—Å", "—Ä–æ–∑–∞", "–∫–∞–∫—Ç—É—Å", "—Ñ–∏–∞–ª–∫–∞", "–¥—Ä–∞—Ü–µ–Ω–∞", "—Å–ø–∞—Ç–∏—Ñ–∏–ª–ª—É–º", "–º–æ–Ω—Å—Ç–µ—Ä–∞"]
        
        for line in lines:
            line_lower = line.lower()
            for keyword in plant_keywords:
                if keyword in line_lower:
                    plant_name = keyword.capitalize()
                    break
            if plant_name != "–†–∞—Å—Ç–µ–Ω–∏–µ":
                break
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = raw_text.split('\n\n')
        short_text = ""
        
        for para in paragraphs[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–±–∑–∞—Ü–∞
            if len(short_text) + len(para) > 400:
                break
            short_text += para.strip() + "\n\n"
        
        if len(raw_text) > len(short_text):
            short_text += "..."
        
        formatted = f"üåø <b>{plant_name}</b>\n\n{short_text.strip()}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    formatted += "\n\nüíæ <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª–∏–≤–µ!</i>"
    
    return formatted

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def optimize_image(image_data: bytes) -> bytes:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(BytesIO(image_data))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –£–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1024px
        if max(image.size) > 1024:
            image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
        
        output = BytesIO()
        image.save(output, format='JPEG', quality=85, optimize=True)
        return output.getvalue()
    except:
        return image_data

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def analyze_plant_image(image_data: bytes, user_question: str = None) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        optimized_image = await optimize_image(image_data)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ –¥–∞–π –ö–†–ê–¢–ö–ò–ô –æ—Ç–≤–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

        –†–ê–°–¢–ï–ù–ò–ï: [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è]
        –°–û–°–¢–û–Ø–ù–ò–ï: [–∑–¥–æ—Ä–æ–≤—å–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º]
        –ü–û–õ–ò–í: [–∫–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å]
        –°–í–ï–¢: [—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é]
        –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: [–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞]
        –°–û–í–ï–¢: [–æ–¥–∏–Ω –≤–∞–∂–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É]

        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —á–µ—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        if user_question:
            prompt += f"\n\n–¢–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {user_question}"
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=600,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            temperature=0.3
        )
        
        raw_analysis = response.choices[0].message.content
        formatted_analysis = format_plant_analysis(raw_analysis)
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": raw_analysis
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        db = await get_db()
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await message.answer(
        f"üå± –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n"
        "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚ùì –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö\n"
        "üåø –ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ",
        reply_markup=main_menu()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üå± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

üì∏ <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö:</b>
‚Ä¢ –ù–∞–∂–º–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
‚Ä¢ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ü–æ–ª—É—á–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç

üåø <b>–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –û—Ç–º–µ—á–∞–π –ø–æ–ª–∏–≤ –∏ —É—Ö–æ–¥
‚Ä¢ –ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    try:
        processing_msg = await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        user_question = message.caption if message.caption else None
        result = await analyze_plant_image(file_data.read(), user_question)
        
        await processing_msg.delete()
        
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            user_id = message.from_user.id
            temp_analyses[user_id] = {
                "analysis": result.get("raw_analysis", result["analysis"]),
                "formatted_analysis": result["analysis"],
                "photo_file_id": photo.file_id,
                "date": datetime.now()
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply(
                f"üå± <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>\n\n{result['analysis']}",
                parse_mode="HTML",
                reply_markup=after_analysis()
            )
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "analyze")
async def analyze_callback(callback: types.CallbackQuery):
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    await callback.answer()

@dp.callback_query(F.data == "question")
async def question_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö:")
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()

@dp.message(StateFilter(PlantStates.waiting_question))
async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        processing_msg = await message.reply("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        
        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –∏ —Ü–≤–µ—Ç–∞–º. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."
                },
                {
                    "role": "user",
                    "content": message.text
                }
            ],
            max_tokens=800,
            temperature=0.4
        )
        
        await processing_msg.delete()
        
        answer = response.choices[0].message.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not any(char in answer for char in ["üåø", "üíß", "‚òÄÔ∏è", "üå°Ô∏è", "üí°"]):
            answer = f"üåø <b>–û—Ç–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n\n{answer}"
        
        await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.callback_query(F.data == "save_plant")
async def save_plant_callback(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        try:
            analysis_data = temp_analyses[user_id]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            db = await get_db()
            plant_id = await db.save_plant(
                user_id=user_id,
                analysis=analysis_data["analysis"],
                photo_file_id=analysis_data["photo_file_id"]
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del temp_analyses[user_id]
            
            await callback.message.answer(
                "‚úÖ <b>–†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                "üå± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –ø–æ–ª–∏–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—Ö–æ–¥–∞\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
    
    await callback.answer()

@dp.callback_query(F.data == "my_plants")
async def my_plants_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        plants = await db.get_user_plants(user_id, limit=5)
        
        if not plants:
            await callback.message.answer(
                "üå± <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π</b>\n\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            await callback.answer()
            return
        
        text = f"üåø <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π):</b>\n\n"
        
        for i, plant in enumerate(plants, 1):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            plant_name = f"–†–∞—Å—Ç–µ–Ω–∏–µ #{plant['id']}"
            if plant.get('plant_name'):
                plant_name = plant['plant_name']
            elif "–†–ê–°–¢–ï–ù–ò–ï:" in str(plant['analysis']):
                lines = plant['analysis'].split('\n')
                for line in lines:
                    if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                        plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                        break
            
            saved_date = plant["saved_date"].strftime("%d.%m.%Y")
            
            if plant["last_watered"]:
                watered = plant["last_watered"].strftime("%d.%m")
                water_icon = "üíß"
            else:
                watered = "–Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
                water_icon = "üåµ"
            
            text += f"{i}. üå± <b>{plant_name}</b>\n"
            text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {saved_date}\n"
            text += f"   {water_icon} –ü–æ–ª–∏–≤: {watered}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤ –≤—Å–µ—Ö", callback_data="water_plants")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await callback.message.answer(
            text, 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π.")
    
    await callback.answer()

@dp.callback_query(F.data == "water_plants")
async def water_plants_callback(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª–∏–≤–∞"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        await db.update_watering(user_id)
        
        current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        
        await callback.message.answer(
            f"üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n"
            f"üå± –í—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã {current_time}\n\n"
            f"üí° <b>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤:</b>\n"
            f"‚Ä¢ –û–±—ã—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: —á–µ—Ä–µ–∑ 3-7 –¥–Ω–µ–π\n"
            f"‚Ä¢ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã: —á–µ—Ä–µ–∑ 1-2 –Ω–µ–¥–µ–ª–∏\n"
            f"‚Ä¢ –û—Ä—Ö–∏–¥–µ–∏: —á–µ—Ä–µ–∑ 5-10 –¥–Ω–µ–π\n\n"
            f"‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã!",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª–∏–≤–∞.")
    
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_callback(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        stats = await db.get_user_stats(user_id)
        
        text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        text += f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b> {stats['total_plants']}\n"
        
        if stats['total_plants'] > 0:
            watered_percent = int((stats['watered_plants'] / stats['total_plants']) * 100)
            text += f"üíß <b>–ü–æ–ª–∏—Ç—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:</b> {stats['watered_plants']} ({watered_percent}%)\n"
            
            if stats['first_plant_date']:
                first_date = stats['first_plant_date'].strftime("%d.%m.%Y")
                text += f"üìÖ <b>–ü–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:</b> {first_date}\n"
            
            if stats['last_watered_date']:
                last_watered = stats['last_watered_date'].strftime("%d.%m.%Y")
                text += f"üíß <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤:</b> {last_watered}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if stats['total_plants'] == 0:
            text += f"\nüåü <b>–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!</b>\n"
            text += f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        elif stats['watered_plants'] == stats['total_plants']:
            text += f"\nüèÜ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã!"
        elif stats['watered_plants'] == 0:
            text += f"\nüåµ <b>–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞!</b> –í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –∂–¥—É—Ç –≤–æ–¥—ã."
        else:
            text += f"\nüí™ <b>–•–æ—Ä–æ—à–∏–π —É—Ö–æ–¥!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        
        await callback.message.answer(text, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    await callback.answer()

@dp.callback_query(F.data == "menu")
async def menu_callback(callback: types.CallbackQuery):
    await callback.message.answer("üå± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", parse_mode="HTML", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "ask_about")
async def ask_about_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        await callback.message.answer(
            "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏:</b>\n\n"
            "üí° <b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n"
            "‚Ä¢ –ü–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è?\n"
            "‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å?\n"
            "‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∞?\n"
            "‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ —Ü–≤–µ—Ç—ë—Ç?",
            parse_mode="HTML"
        )
        await state.set_state(PlantStates.waiting_question)
    else:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
    
    await callback.answer()

# Webhook setup –¥–ª—è Railway
async def on_startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    if WEBHOOK_URL:
        await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        print("Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")

async def on_shutdown():
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    db = await get_db()
    await db.close()
    await bot.session.close()

# Webhook handler
async def webhook_handler(request):
    url = str(request.url)
    index = url.rfind('/')
    token = url[index + 1:]
    
    if token == BOT_TOKEN.split(':')[1]:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        update = types.Update.model_validate(await request.json(), strict=False)
        await dp.feed_update(bot, update)
        return web.Response()
    else:
        return web.Response(status=403)

# Health check –¥–ª—è Railway
async def health_check(request):
    return web.json_response({"status": "healthy", "bot": "Bloom AI Plant Care Assistant"})

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(level=logging.INFO)
    
    await on_startup()
    
    if WEBHOOK_URL:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
        app = web.Application()
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/health', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        print(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üå± –ë–æ—Ç Bloom –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞—é—â–∏–º
        try:
            await asyncio.Future()
        except KeyboardInterrupt:
            pass
        finally:
            await runner.cleanup()
            await on_shutdown()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        try:
            await dp.start_polling(bot)
        finally:
            await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
