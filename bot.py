import asyncio
import logging
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    BOT_TOKEN, WEBHOOK_URL, PORT, MOSCOW_TZ, 
    validate_config, logger
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from database import init_database, get_db

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.reminder_service import (
    check_and_send_reminders, 
    check_monthly_photo_reminders
)

# –ò–º–ø–æ—Ä—Ç—ã handlers
from handlers import (
    commands, photo, callbacks, plants, 
    questions, feedback, onboarding, growing
)

# –ò–º–ø–æ—Ä—Ç middleware
from middleware import ActivityTrackingMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –≤ config
logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bloom AI Bot...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)


async def fix_inactive_reminders():
    """üîß –û–î–ù–û–†–ê–ó–û–í–´–ô –§–ò–ö–°: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        logger.info("")
        logger.info("=" * 70)
        logger.info("üîß –ü–†–û–í–ï–†–ö–ê –ù–ï–ê–ö–¢–ò–í–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô")
        logger.info("=" * 70)
        
        db = await get_db()
        async with db.pool.acquire() as conn:
            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
            inactive_count = await conn.fetchval("""
                SELECT COUNT(*) 
                FROM reminders r
                JOIN plants p ON r.plant_id = p.id
                WHERE r.reminder_type = 'watering'
                  AND r.is_active = FALSE
                  AND p.plant_type = 'regular'
                  AND p.reminder_enabled = TRUE
            """)
            
            if inactive_count > 0:
                logger.warning(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û {inactive_count} –ù–ï–ê–ö–¢–ò–í–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô!")
                logger.info("üîß –ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –í–°–ï –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
                result = await conn.execute("""
                    UPDATE reminders r
                    SET is_active = TRUE
                    FROM plants p
                    WHERE r.plant_id = p.id
                      AND r.reminder_type = 'watering'
                      AND r.is_active = FALSE
                      AND p.plant_type = 'regular'
                      AND p.reminder_enabled = TRUE
                """)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                active_count = await conn.fetchval("""
                    SELECT COUNT(*) 
                    FROM reminders 
                    WHERE reminder_type = 'watering' 
                      AND is_active = TRUE
                """)
                
                logger.info(f"‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û {inactive_count} –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô!")
                logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–µ–π—á–∞—Å: {active_count}")
                logger.info("")
                logger.info("üí° –¢–µ–ø–µ—Ä—å /test_reminders –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
            else:
                logger.info("‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã - —Ñ–∏–∫—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        logger.info("=" * 70)
        logger.info("")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
        # –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("=" * 70)
        logger.info("üå± BLOOM AI BOT - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
        logger.info("=" * 70)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # üîß –û–î–ù–û–†–ê–ó–û–í–´–ô –§–ò–ö–° –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
        await fix_inactive_reminders()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook
        logger.info("üîß –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...")
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        else:
            logger.info("‚ÑπÔ∏è Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
        register_middleware()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
        register_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        setup_scheduler()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏–ª–∏ polling
        if WEBHOOK_URL:
            await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        else:
            logger.info("‚úÖ Polling mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("=" * 70)
        logger.info("‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 70)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        raise


async def on_shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    if scheduler.running:
        scheduler.shutdown()
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        db = await get_db()
        await db.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass
    
    try:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass


def register_middleware():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dp.message.middleware(ActivityTrackingMiddleware())
    dp.callback_query.middleware(ActivityTrackingMiddleware())
    
    logger.info("‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (Activity Tracking)")


def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è routers –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    dp.include_router(commands.router)
    dp.include_router(photo.router)
    dp.include_router(plants.router)
    dp.include_router(questions.router)
    dp.include_router(feedback.router)
    dp.include_router(onboarding.router)
    dp.include_router(growing.router)
    dp.include_router(callbacks.router)  # Callbacks –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∫–∞–∫ fallback
    
    logger.info("‚úÖ Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    logger.info("")
    logger.info("=" * 70)
    logger.info("‚è∞ –ù–ê–°–¢–†–û–ô–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ó–ê–î–ê–ß")
    logger.info("=" * 70)
    
    from utils.time_utils import get_moscow_now
    moscow_now = get_moscow_now()
    logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}")
    logger.info(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {MOSCOW_TZ}")
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –≤ 9:00 –ú–°–ö
    scheduler.add_job(
        check_and_send_reminders,
        'cron',
        hour=9,
        minute=0,
        args=[bot],
        id='reminder_check',
        replace_existing=True
    )
    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ 'reminder_check' –¥–æ–±–∞–≤–ª–µ–Ω–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00 –ú–°–ö")
    
    # –ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ 10:00 –ú–°–ö
    scheduler.add_job(
        check_monthly_photo_reminders,
        'cron',
        hour=10,
        minute=0,
        args=[bot],
        id='monthly_reminder_check',
        replace_existing=True
    )
    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ 'monthly_reminder_check' –¥–æ–±–∞–≤–ª–µ–Ω–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 –ú–°–ö")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("")
    logger.info("üöÄ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–ü–£–©–ï–ù –ò –ê–ö–¢–ò–í–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if scheduler.running:
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –†–ê–ë–û–¢–ê–ï–¢")
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(scheduler.get_jobs())}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –° –í–†–ï–ú–ï–ù–ï–ú –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        logger.info("")
        logger.info("üìã –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ó–ê–î–ê–ß:")
        for job in scheduler.get_jobs():
            # –¢–µ–ø–µ—Ä—å next_run_time –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ start()
            next_run = job.next_run_time.strftime('%d.%m.%Y %H:%M:%S') if job.next_run_time else '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
            logger.info(f"   ‚Ä¢ {job.id}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ {next_run}")
    else:
        logger.error("‚ùå –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ï –ó–ê–ü–£–°–¢–ò–õ–°–Ø!")
    
    logger.info("=" * 70)


async def webhook_handler(request):
    """Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ webhook")
            return web.Response(status=403)
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return web.Response(status=500)


async def health_check(request):
    """Health check endpoint"""
    from utils.time_utils import get_moscow_now
    moscow_now = get_moscow_now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_status = "running" if scheduler.running else "stopped"
    jobs_count = len(scheduler.get_jobs()) if scheduler.running else 0
    
    next_jobs = []
    if scheduler.running:
        for job in scheduler.get_jobs():
            next_jobs.append({
                "id": job.id,
                "next_run": str(job.next_run_time)
            })
    
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI", 
        "version": "5.4 - Stats Removed + Reminders Fix",
        "time_msk": moscow_now.strftime('%Y-%m-%d %H:%M:%S'),
        "timezone": str(MOSCOW_TZ),
        "scheduler": {
            "status": scheduler_status,
            "jobs_count": jobs_count,
            "next_jobs": next_jobs
        }
    })


async def main():
    """Main —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bloom AI v5.4 (Stats Removed + Reminders Fix)...")
        
        await on_startup()
        
        if WEBHOOK_URL:
            # Webhook mode
            app = web.Application()
            app.router.add_post('/webhook', webhook_handler)
            app.router.add_get('/health', health_check)
            app.router.add_get('/', health_check)
            
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info("")
            logger.info("=" * 70)
            logger.info(f"üöÄ BLOOM AI v5.4 –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù")
            logger.info(f"üåê –ü–æ—Ä—Ç: {PORT}")
            logger.info(f"üì° Webhook: {WEBHOOK_URL}/webhook")
            logger.info(f"‚ù§Ô∏è Health check: {WEBHOOK_URL}/health")
            logger.info("=" * 70)
            
            try:
                await asyncio.Future()
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await runner.cleanup()
                await on_shutdown()
        else:
            # Polling mode
            logger.info("")
            logger.info("=" * 70)
            logger.info("ü§ñ BLOOM AI v5.4 –í –†–ï–ñ–ò–ú–ï POLLING")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            logger.info("=" * 70)
            
            try:
                await dp.start_polling(bot, drop_pending_updates=True)
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await on_shutdown()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
