import asyncio
import os
import logging
from datetime import datetime, timedelta
import json
import base64
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeDefault
from aiohttp import web
from openai import AsyncOpenAI
from PIL import Image
from database import init_database, get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PLANTID_API_KEY = os.getenv("PLANTID_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
temp_analyses = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class PlantStates(StatesGroup):
    waiting_question = State()
    editing_plant_name = State()

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π
PLANT_IDENTIFICATION_PROMPT = """
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ:
1. –§–æ—Ä–º—É –∏ —Ç–µ–∫—Å—Ç—É—Ä—É –ª–∏—Å—Ç—å–µ–≤ (–æ–≤–∞–ª—å–Ω—ã–µ/–¥–ª–∏–Ω–Ω—ã–µ/–º—è—Å–∏—Å—Ç—ã–µ/–≥–ª—è–Ω—Ü–µ–≤—ã–µ/–º–∞—Ç–æ–≤—ã–µ)
2. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ –Ω–∞ —Å—Ç–µ–±–ª–µ
3. –¶–≤–µ—Ç –∏ –ø—Ä–æ–∂–∏–ª–∫–∏ –ª–∏—Å—Ç—å–µ–≤
4. –§–æ—Ä–º—É —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
5. –í–∏–¥–∏–º—ã–µ —Ü–≤–µ—Ç—ã –∏–ª–∏ –ø–ª–æ–¥—ã
6. –†–∞–∑–º–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –≥–æ—Ä—à–∫–∞

–î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–†–ê–°–¢–ï–ù–ò–ï: [–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ª–∞—Ç–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [–ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏]
–ü–†–ò–ó–ù–ê–ö–ò: [–∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏]
–°–ï–ú–ï–ô–°–¢–í–û: [–±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ]
–†–û–î–ò–ù–ê: [–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è]

–°–û–°–¢–û–Ø–ù–ò–ï: [–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ –ª–∏—Å—Ç—å—è–º, —Ü–≤–µ—Ç—É, —É–ø—Ä—É–≥–æ—Å—Ç–∏]
–ü–û–õ–ò–í: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞]
–°–í–ï–¢: [—Ç–æ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è]
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: [–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞]
–í–õ–ê–ñ–ù–û–°–¢–¨: [—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞]
–ü–û–î–ö–û–†–ú–ö–ê: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–¥–æ–±—Ä–µ–Ω–∏—è–º]
–ü–ï–†–ï–°–ê–î–ö–ê: [–∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∏–¥]

–ü–†–û–ë–õ–ï–ú–´: [–≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞]
–°–û–í–ï–¢: [—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É—Ö–æ–¥–∞ –∑–∞ —ç—Ç–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º]

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ä–æ–¥ –∏–ª–∏ —Å–µ–º–µ–π—Å—Ç–≤–æ.
"""

def extract_plant_name_from_analysis(analysis_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    if not analysis_text:
        return None
    
    lines = analysis_text.split('\n')
    for line in lines:
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if "(" in plant_name:
                plant_name = plant_name.split("(")[0].strip()
            # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
            plant_name = plant_name.split("–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:")[0].strip()
            plant_name = plant_name.split("%")[0].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
            if 3 <= len(plant_name) <= 50 and not plant_name.lower().startswith(("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω", "–∫–æ–º–Ω–∞—Ç–Ω", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")):
                return plant_name
    
    return None

def is_plant_related_and_safe(text: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω"""
    text_lower = text.lower()
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã (–Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è)
    forbidden_keywords = [
        '–º–∞—Ä–∏—Ö—É–∞–Ω–∞', '–∫–∞–Ω–Ω–∞–±–∏—Å', '–∫–æ–Ω–æ–ø–ª—è', '–≥–∞—à–∏—à', '—Ç—Ä–∞–≤–∫–∞', '–ø–ª–∞–Ω', '–¥—É—Ä—å',
        '–∫–æ–∫–∞', '–∫–æ–∫–∞–∏–Ω', '–º–∞–∫', '–æ–ø–∏—É–º', '–≥–µ—Ä–æ–∏–Ω', '–ø—Å–∏–ª–æ—Ü–∏–±–∏–Ω', '–≥—Ä–∏–±—ã –≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω–Ω—ã–µ',
        '–¥—É—Ä–º–∞–Ω', '–±–µ–ª–µ–Ω–∞', '–∫—Ä–∞—Å–∞–≤–∫–∞', '–∞—è—É–∞—Å–∫–∞', '—Å–∞–ª–≤–∏—è –¥–∏–≤–∏–Ω–æ—Ä—É–º',
        '–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–π', '–ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω', '–≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω', '–æ–ø—å—è–Ω–µ–Ω'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    for keyword in forbidden_keywords:
        if keyword in text_lower:
            return False, "illegal"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏
    plant_keywords = [
        '—Ä–∞—Å—Ç–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–æ–∫', '–¥–µ—Ä–µ–≤–æ', '–∫—É—Å—Ç', '—Ç—Ä–∞–≤–∞', '–ª–∏—Å—Ç—å—è', '–ª–∏—Å—Ç', '–∫–æ—Ä–Ω–∏', '–∫–æ—Ä–µ–Ω—å',
        '—Å—Ç–µ–±–µ–ª—å', '—Å—Ç–≤–æ–ª', '–≤–µ—Ç–∫–∏', '–≤–µ—Ç–∫–∞', '–ø–ª–æ–¥', '—Ñ—Ä—É–∫—Ç', '–æ–≤–æ—â', '—è–≥–æ–¥–∞', '—Å–µ–º–µ–Ω–∞', '—Å–µ–º—è',
        '–ø–æ–ª–∏–≤', '–ø–æ–ª–∏–≤–∞—Ç—å', '—É–¥–æ–±—Ä–µ–Ω–∏–µ', '–ø–æ–¥–∫–æ—Ä–º–∫–∞', '–ø–µ—Ä–µ—Å–∞–¥–∫–∞', '–ø–æ—á–≤–∞', '–≥—Ä—É–Ω—Ç', '–∑–µ–º–ª—è',
        '–≥–æ—Ä—à–æ–∫', '–∫–∞—à–ø–æ', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '—Å–≤–µ—Ç', '—Å–æ–ª–Ω—Ü–µ', '—Ç–µ–Ω—å', '–≤–ª–∞–∂–Ω–æ—Å—Ç—å', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        '–±–æ–ª–µ–∑–Ω—å', '–≤—Ä–µ–¥–∏—Ç–µ–ª—å', '–∂–µ–ª—Ç–µ—é—Ç', '—Å–æ—Ö–Ω—É—Ç', '–≤—è–Ω—É—Ç', '–æ–ø–∞–¥–∞—é—Ç', '–≥–Ω–∏—é—Ç',
        '—Ñ–∏–∫—É—Å', '—Ä–æ–∑–∞', '–æ—Ä—Ö–∏–¥–µ—è', '–∫–∞–∫—Ç—É—Å', '—Å—É–∫–∫—É–ª–µ–Ω—Ç', '—Ñ–∏–∞–ª–∫–∞', '–≥–µ—Ä–∞–Ω—å', '–¥—Ä–∞—Ü–µ–Ω–∞',
        '—Å–ø–∞—Ç–∏—Ñ–∏–ª–ª—É–º', '–º–æ–Ω—Å—Ç–µ—Ä–∞', '—Ñ–∏–ª–æ–¥–µ–Ω–¥—Ä–æ–Ω', '–∞–ª–æ—ç', '—Ö–ª–æ—Ä–æ—Ñ–∏—Ç—É–º', '–ø–∞–ª—å–º–∞', '–ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫',
        '–±–µ–≥–æ–Ω–∏—è', '–ø–µ—Ç—É–Ω–∏—è', '—Ç—é–ª—å–ø–∞–Ω', '–Ω–∞—Ä—Ü–∏—Å—Å', '–ª–∏–ª–∏—è', '—Ä–æ–º–∞—à–∫–∞', '–ø–æ–¥—Å–æ–ª–Ω—É—Ö',
        '—Ç–æ–º–∞—Ç', '–æ–≥—É—Ä–µ—Ü', '–ø–µ—Ä–µ—Ü', '–±–∞–∫–ª–∞–∂–∞–Ω', '–∫–∞–ø—É—Å—Ç–∞', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '—á–µ—Å–Ω–æ–∫',
        '—è–±–ª–æ–Ω—è', '–≥—Ä—É—à–∞', '–≤–∏—à–Ω—è', '—Å–ª–∏–≤–∞', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–º–∞–ª–∏–Ω–∞', '–∫–ª—É–±–Ω–∏–∫–∞', '—Å–º–æ—Ä–æ–¥–∏–Ω–∞',
        '–∫–æ–º–Ω–∞—Ç–Ω—ã–π', '–¥–æ–º–∞—à–Ω–∏–π', '—Å–∞–¥–æ–≤—ã–π', '–æ–≥–æ—Ä–æ–¥–Ω—ã–π', '–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', '–ø–ª–æ–¥–æ–≤—ã–π',
        '—Ü–≤–µ—Ç–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–µ—Ç', '–±—É—Ç–æ–Ω', '—Å–æ—Ü–≤–µ—Ç–∏–µ', '–ª–µ–ø–µ—Å—Ç–æ–∫', '—Ç—ã—á–∏–Ω–∫–∞', '–ø–µ—Å—Ç–∏–∫',
        '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑', '—Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª', '–ø—Ä–∏–≤–∏–≤–∫–∞', '—á–µ—Ä–µ–Ω–æ–∫', '—Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ', '–ø–æ—Å–∞–¥–∫–∞', '–≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in plant_keywords:
        if keyword in text_lower:
            return True, "plant_related"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
    question_patterns = [
        '–∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å', '–∫–∞–∫ –ø–æ–ª–∏–≤–∞—Ç—å', '–∫–∞–∫ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å', '–∫–∞–∫ —Å–∞–∂–∞—Ç—å', '–∫–∞–∫ –ø–µ—Ä–µ—Å–∞–¥–∏—Ç—å',
        '–ø–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç', '–ø–æ—á–µ–º—É —Å–æ—Ö–Ω—É—Ç', '–ø–æ—á–µ–º—É –Ω–µ —Ä–∞—Å—Ç–µ—Ç', '–ø–æ—á–µ–º—É –Ω–µ —Ü–≤–µ—Ç–µ—Ç',
        '—á—Ç–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º', '—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏', '–º–æ–∂–Ω–æ –ª–∏', '–Ω—É–∂–Ω–æ –ª–∏'
    ]
    
    for pattern in question_patterns:
        if pattern in text_lower:
            return True, "plant_question"
    
    return False, "not_plant_related"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="analyze")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def after_analysis():
    keyboard = [
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_plant")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data="ask_about")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="reanalyze")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def plant_management_keyboard(plant_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º"""
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{plant_id}")],
        [InlineKeyboardButton(text="üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤", callback_data=f"water_{plant_id}")],
        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data=f"history_{plant_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"delete_{plant_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_plant_analysis(raw_text: str, confidence: float = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    
    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
    formatted = ""
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
    confidence_level = confidence or 0
    
    for line in lines:
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            display_name = plant_name.split("(")[0].strip()
            formatted += f"üåø <b>{display_name}</b>\n"
            if "(" in plant_name:
                latin_name = plant_name[plant_name.find("(")+1:plant_name.find(")")]
                formatted += f"üè∑Ô∏è <i>{latin_name}</i>\n"
            
        elif line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
            conf = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip()
            try:
                confidence_level = float(conf.replace("%", ""))
                if confidence_level >= 80:
                    conf_icon = "üéØ"
                elif confidence_level >= 60:
                    conf_icon = "üé™"
                else:
                    conf_icon = "ü§î"
                formatted += f"{conf_icon} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
            except:
                formatted += f"üé™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
                
        elif line.startswith("–ü–†–ò–ó–ù–ê–ö–ò:"):
            signs = line.replace("–ü–†–ò–ó–ù–ê–ö–ò:", "").strip()
            formatted += f"üîç <b>–ü—Ä–∏–∑–Ω–∞–∫–∏:</b> {signs}\n"
            
        elif line.startswith("–°–ï–ú–ï–ô–°–¢–í–û:"):
            family = line.replace("–°–ï–ú–ï–ô–°–¢–í–û:", "").strip()
            formatted += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°–µ–º–µ–π—Å—Ç–≤–æ:</b> {family}\n"
            
        elif line.startswith("–†–û–î–ò–ù–ê:"):
            origin = line.replace("–†–û–î–ò–ù–ê:", "").strip()
            formatted += f"üåç <b>–†–æ–¥–∏–Ω–∞:</b> {origin}\n\n"
            
        elif line.startswith("–°–û–°–¢–û–Ø–ù–ò–ï:"):
            condition = line.replace("–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip()
            if any(word in condition.lower() for word in ["–∑–¥–æ—Ä–æ–≤", "—Ö–æ—Ä–æ—à", "–æ—Ç–ª–∏—á–Ω", "–Ω–æ—Ä–º"]):
                icon = "‚úÖ"
            elif any(word in condition.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–±–æ–ª–µ–Ω", "–ø–ª–æ—Ö", "—Å—Ç—Ä–µ—Å—Å"]):
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ÑπÔ∏è"
            formatted += f"{icon} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition}\n\n"
            
        elif line.startswith("–ü–û–õ–ò–í:"):
            watering = line.replace("–ü–û–õ–ò–í:", "").strip()
            formatted += f"üíß <b>–ü–æ–ª–∏–≤:</b> {watering}\n"
            
        elif line.startswith("–°–í–ï–¢:"):
            light = line.replace("–°–í–ï–¢:", "").strip()
            formatted += f"‚òÄÔ∏è <b>–û—Å–≤–µ—â–µ–Ω–∏–µ:</b> {light}\n"
            
        elif line.startswith("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:"):
            temp = line.replace("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:", "").strip()
            formatted += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}\n"
            
        elif line.startswith("–í–õ–ê–ñ–ù–û–°–¢–¨:"):
            humidity = line.replace("–í–õ–ê–ñ–ù–û–°–¢–¨:", "").strip()
            formatted += f"üí® <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}\n"
            
        elif line.startswith("–ü–û–î–ö–û–†–ú–ö–ê:"):
            feeding = line.replace("–ü–û–î–ö–û–†–ú–ö–ê:", "").strip()
            formatted += f"üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> {feeding}\n"
            
        elif line.startswith("–ü–ï–†–ï–°–ê–î–ö–ê:"):
            repot = line.replace("–ü–ï–†–ï–°–ê–î–ö–ê:", "").strip()
            formatted += f"ü™¥ <b>–ü–µ—Ä–µ—Å–∞–¥–∫–∞:</b> {repot}\n"
            
        elif line.startswith("–ü–†–û–ë–õ–ï–ú–´:"):
            problems = line.replace("–ü–†–û–ë–õ–ï–ú–´:", "").strip()
            formatted += f"\n‚ö†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {problems}\n"
            
        elif line.startswith("–°–û–í–ï–¢:"):
            advice = line.replace("–°–û–í–ï–¢:", "").strip()
            formatted += f"\nüí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:</b> {advice}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    if confidence_level >= 80:
        formatted += "\n\nüèÜ <i>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</i>"
    elif confidence_level >= 60:
        formatted += "\n\nüëç <i>–•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</i>"
    else:
        formatted += "\n\nü§î <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</i>"
    
    formatted += "\nüíæ <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!</i>"
    
    return formatted

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def optimize_image_for_analysis(image_data: bytes, high_quality: bool = True) -> bytes:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        image = Image.open(BytesIO(image_data))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if high_quality:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if max(image.size) < 1024:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ratio = 1024 / max(image.size)
                new_size = (int(image.size[0] * ratio), int(image.size[1] * ratio))
                image = image.resize(new_size, Image.Resampling.LANCZOS)
            elif max(image.size) > 2048:
                # –£–º–µ–Ω—å—à–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ
                image.thumbnail((2048, 2048), Image.Resampling.LANCZOS)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if max(image.size) > 1024:
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
        
        output = BytesIO()
        # –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        quality = 95 if high_quality else 85
        image.save(output, format='JPEG', quality=quality, optimize=True)
        return output.getvalue()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image_data

async def analyze_with_openai_advanced(image_data: bytes, user_question: str = None) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision"""
    if not openai_client:
        return {"success": False, "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        prompt = PLANT_IDENTIFICATION_PROMPT
        
        if user_question:
            prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}"
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
            messages=[
                {
                    "role": "system",
                    "content": "–í—ã - –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∏ —Å–∞–¥–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. –í—ã —Å–ø–æ—Å–æ–±–Ω—ã —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∏–¥—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
                            }
                        }
                    ]
                }
            ],
            max_tokens=1200,
            temperature=0.1  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        )
        
        raw_analysis = response.choices[0].message.content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if len(raw_analysis) < 100 or "sorry" in raw_analysis.lower() or "can't help" in raw_analysis.lower():
            raise Exception("–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        confidence = 0
        for line in raw_analysis.split('\n'):
            if line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
                try:
                    conf_str = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip().replace("%", "")
                    confidence = float(conf_str)
                except:
                    confidence = 70  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
        plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
        for line in raw_analysis.split('\n'):
            if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                break
        
        formatted_analysis = format_plant_analysis(raw_analysis, confidence)
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": raw_analysis,
            "plant_name": plant_name,
            "confidence": confidence,
            "source": "openai_advanced"
        }
        
    except Exception as e:
        print(f"OpenAI Advanced API error: {e}")
        return {"success": False, "error": str(e)}

async def analyze_with_plantid_advanced(image_data: bytes) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Plant.id API"""
    if not PLANTID_API_KEY:
        return {"success": False, "error": "Plant.id API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        import httpx
        
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Plant.id
        async with httpx.AsyncClient(timeout=45.0) as client:
            response = await client.post(
                "https://api.plant.id/v2/identify",
                json={
                    "images": [f"data:image/jpeg;base64,{base64_image}"],
                    "modifiers": [
                        "crops_fast", 
                        "similar_images", 
                        "health_assessment",
                        "disease_similar_images"
                    ],
                    "plant_language": "ru",
                    "plant_net": "auto",
                    "plant_details": [
                        "common_names",
                        "url", 
                        "description",
                        "taxonomy",
                        "rank",
                        "gbif_id",
                        "inaturalist_id",
                        "image",
                        "synonyms",
                        "edible_parts",
                        "watering",
                        "propagation_methods"
                    ]
                },
                headers={
                    "Content-Type": "application/json",
                    "Api-Key": PLANTID_API_KEY
                }
            )
        
        if response.status_code != 200:
            return {"success": False, "error": f"Plant.id API error: {response.status_code}"}
        
        data = response.json()
        
        if not data.get("suggestions") or len(data["suggestions"]) == 0:
            return {"success": False, "error": "–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"}
        
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        suggestion = data["suggestions"][0]
        plant_details = suggestion.get("plant_details", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        plant_name = suggestion.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        probability = suggestion.get("probability", 0) * 100
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        common_names = plant_details.get("common_names", {})
        russian_names = common_names.get("ru", [])
        if russian_names:
            display_name = russian_names[0]
        else:
            display_name = plant_name
        
        # –¢–∞–∫—Å–æ–Ω–æ–º–∏—è
        taxonomy = plant_details.get("taxonomy", {})
        family = taxonomy.get("family", "")
        
        # –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_info = "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
        disease_name = None
        if data.get("health_assessment"):
            health = data["health_assessment"]
            if health.get("is_healthy"):
                health_prob = health["is_healthy"]["probability"]
                if health_prob > 0.8:
                    health_info = f"–†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º ({health_prob*100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)"
                elif health_prob > 0.5:
                    health_info = f"–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ({health_prob*100:.0f}% –∑–¥–æ—Ä–æ–≤—å—è)"
                else:
                    health_info = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º ({health_prob*100:.0f}% –∑–¥–æ—Ä–æ–≤—å—è)"
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–∑–Ω–∏
                if health.get("diseases"):
                    diseases = health["diseases"]
                    if diseases:
                        top_disease = diseases[0]
                        disease_name = top_disease.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
                        disease_prob = top_disease.get("probability", 0) * 100
                        if disease_prob > 30:
                            health_info += f". –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {disease_name} ({disease_prob:.0f}%)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        watering_freq = "–ü–æ–ª–∏–≤–∞–π—Ç–µ –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö–Ω–µ—Ç –Ω–∞ 2-3 —Å–º"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_text = f"""
–†–ê–°–¢–ï–ù–ò–ï: {display_name} ({plant_name})
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: {probability:.0f}%
–ü–†–ò–ó–ù–ê–ö–ò: –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ñ–æ—Ä–º–µ –ª–∏—Å—Ç—å–µ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É —Ä–æ—Å—Ç–∞ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º
–°–ï–ú–ï–ô–°–¢–í–û: {family if family else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
–†–û–î–ò–ù–ê: {plant_details.get('description', {}).get('value', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')[:100] + '...' if plant_details.get('description', {}).get('value') else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}

–°–û–°–¢–û–Ø–ù–ò–ï: {health_info}
–ü–û–õ–ò–í: {watering_freq}
–°–í–ï–¢: –ü–æ–¥–±–µ—Ä–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C (—É—Ç–æ—á–Ω–∏—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞)
–í–õ–ê–ñ–ù–û–°–¢–¨: –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ 40-60%
–ü–û–î–ö–û–†–ú–ö–ê: –í –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ –∫–∞–∂–¥—ã–µ 2-4 –Ω–µ–¥–µ–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º —É–¥–æ–±—Ä–µ–Ω–∏–µ–º
–ü–ï–†–ï–°–ê–î–ö–ê: –ú–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ, –≤–∑—Ä–æ—Å–ª—ã–µ - –∫–∞–∂–¥—ã–µ 2-3 –≥–æ–¥–∞

–ü–†–û–ë–õ–ï–ú–´: {disease_name if disease_name else '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–∏–ø–∏—á–Ω—ã–º–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –±–æ–ª–µ–∑–Ω—è–º–∏'}
–°–û–í–ï–¢: –ò–∑—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ {display_name} –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ö–æ–¥–∞ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—é –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è
        """.strip()
        
        formatted_analysis = format_plant_analysis(analysis_text, probability)
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": analysis_text,
            "plant_name": display_name,
            "confidence": probability,
            "source": "plantid_advanced",
            "plant_details": plant_details
        }
        
    except Exception as e:
        print(f"Plant.id Advanced API error: {e}")
        return {"success": False, "error": str(e)}

async def fallback_plant_analysis(user_question: str = None) -> dict:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±—â–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏"""
    
    fallback_text = """
–†–ê–°–¢–ï–ù–ò–ï: –ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: –ù–∏–∑–∫–∞—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
–ü–†–ò–ó–ù–ê–ö–ò: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–°–ï–ú–ï–ô–°–¢–í–û: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
–†–û–î–ò–ù–ê: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ

–°–û–°–¢–û–Ø–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ª–∏—Å—Ç—å–µ–≤, —Å—Ç–µ–±–ª—è –∏ –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–ü–û–õ–ò–í: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–∞–ª—å—Ü–µ–º - –ø–æ–ª–∏–≤–∞–π—Ç–µ –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ–¥—Å–æ—Ö –Ω–∞ 2-3 —Å–º
–°–í–ï–¢: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
–í–õ–ê–ñ–ù–û–°–¢–¨: 40-60% –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞
–ü–û–î–ö–û–†–ú–ö–ê: –í –≤–µ—Å–µ–Ω–Ω–µ-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–∑ –≤ 2-4 –Ω–µ–¥–µ–ª–∏
–ü–ï–†–ï–°–ê–î–ö–ê: –ú–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ, –≤–∑—Ä–æ—Å–ª—ã–µ - –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ü–†–û–ë–õ–ï–ú–´: –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ª–∏—Å—Ç—å–µ–≤ - –æ–Ω–∏ –ø–æ–∫–∞–∂—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Ö–æ–¥–æ–º
–°–û–í–ï–¢: –î–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, –ø–æ–∫–∞–∑–∞–≤ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
    """.strip()
    
    if user_question:
        fallback_text += f"\n\n–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É '{user_question}': –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É –ø–æ –∫–æ–º–Ω–∞—Ç–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∞–¥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ."
    
    formatted_analysis = format_plant_analysis(fallback_text, 25)
    
    return {
        "success": True,
        "analysis": formatted_analysis,
        "raw_analysis": fallback_text,
        "plant_name": "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        "confidence": 25,
        "source": "fallback_improved",
        "needs_retry": True
    }

async def analyze_plant_image(image_data: bytes, user_question: str = None, retry_count: int = 0) -> dict:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    
    # –ü–æ–ø—ã—Ç–∫–∞ 1: OpenAI GPT-4 Vision (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    print("üîç –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision...")
    openai_result = await analyze_with_openai_advanced(image_data, user_question)
    
    if openai_result["success"] and openai_result.get("confidence", 0) >= 60:
        print(f"‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å {openai_result.get('confidence')}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return openai_result
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: Plant.id API 
    print("üåø –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Plant.id...")
    plantid_result = await analyze_with_plantid_advanced(image_data)
    
    if plantid_result["success"] and plantid_result.get("confidence", 0) >= 50:
        print(f"‚úÖ Plant.id —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å {plantid_result.get('confidence')}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return plantid_result
    
    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    best_result = None
    best_confidence = 0
    
    if openai_result["success"]:
        openai_conf = openai_result.get("confidence", 0)
        if openai_conf > best_confidence:
            best_result = openai_result
            best_confidence = openai_conf
    
    if plantid_result["success"]:
        plantid_conf = plantid_result.get("confidence", 0)
        if plantid_conf > best_confidence:
            best_result = plantid_result  
            best_confidence = plantid_conf
    
    if best_result and best_confidence > 30:
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É—é –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {best_confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
        return best_result
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏)
    if retry_count == 0:
        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        return await analyze_plant_image(image_data, user_question, retry_count + 1)
    
    # Fallback —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print("‚ö†Ô∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –¥–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    return await fallback_plant_analysis(user_question)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description="üå± –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="analyze", description="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è"),
        BotCommand(command="question", description="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        BotCommand(command="plants", description="üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"),
    ]
    
    try:
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await init_database()
    await set_bot_commands()
    
    if WEBHOOK_URL:
        await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
        print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        print("üîÑ Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        db = await get_db()
        await db.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    try:
        await bot.session.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await message.answer(
        f"üå± –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n"
        "üì∏ –¢–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n"
        "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö\n"
        "üåø –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –∏ —É—Ö–æ–¥–µ\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!\n"
        "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
        reply_markup=main_menu()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üå± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

üì∏ <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /analyze
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /question
‚Ä¢ –ü–æ–ª—É—á–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç

üåø <b>–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /plants - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
‚Ä¢ –û—Ç–º–µ—á–∞–π –ø–æ–ª–∏–≤ –∏ —É—Ö–æ–¥
‚Ä¢ –ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ö–æ–¥–∞

<b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∂–∏ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
‚Ä¢ –í–∫–ª—é—á–∏ –≤ –∫–∞–¥—Ä –≤—Å—ë —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/analyze - –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è
/question - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/plants - –º–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è  
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° <b>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥!</b>
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu())

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    try:
        processing_msg = await message.reply(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ...</b>\n"
            "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
            "üß† –ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_question = message.caption if message.caption else None
        result = await analyze_plant_image(file_data.read(), user_question)
        
        await processing_msg.delete()
        
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            user_id = message.from_user.id
            temp_analyses[user_id] = {
                "analysis": result.get("raw_analysis", result["analysis"]),
                "formatted_analysis": result["analysis"],
                "photo_file_id": photo.file_id,
                "date": datetime.now(),
                "source": result.get("source", "unknown"),
                "plant_name": result.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"),
                "confidence": result.get("confidence", 0),
                "needs_retry": result.get("needs_retry", False)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            retry_text = ""
            if result.get("needs_retry"):
                retry_text = ("\n\nüì∏ <b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
                            "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —è—Ä–∫–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                            "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º\n"
                            "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞")
            
            response_text = f"üå± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{result['analysis']}{retry_text}"
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
            if result.get("needs_retry"):
                keyboard = [
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="reanalyze")],
                    [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="save_plant")],
                    [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_about")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            else:
                reply_markup = after_analysis()
            
            await message.reply(
                response_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {error_msg}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                f"‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu()
        )

@dp.message(F.text, ~StateFilter(PlantStates.waiting_question, PlantStates.editing_plant_name))
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = message.text.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω
        is_safe_plant_topic, reason = is_plant_related_and_safe(text)
        
        if reason == "illegal":
            await message.reply(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.\n\n"
                "üå± –Ø –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏, —Å–∞–¥–æ–≤—ã–º–∏ –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=main_menu()
            )
            return
        
        if not is_safe_plant_topic:
            await message.reply(
                "üå± –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö!\n\n"
                "üí° <b>–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
                "‚Ä¢ –£—Ö–æ–¥–æ–º –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ –∏ —Ü–≤–µ—Ç–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –ü–æ–ª–∏–≤–æ–º –∏ –ø–æ–¥–∫–æ—Ä–º–∫–æ–π\n"
                "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n\n"
                "üì∏ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
        processing_msg = await message.reply("üåø <b>–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</b>", parse_mode="HTML")
        
        user_id = message.from_user.id
        user_context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            user_context = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}. –£—á—Ç–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ."
        
        answer = None
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
        if openai_client:
            try:
                enhanced_prompt = f"""
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ –∏ —Å–∞–¥–æ–≤—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö, –ø–ª–æ–¥–æ–≤—ã—Ö, –æ–≤–æ—â–Ω—ã—Ö).
–ù–ï –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö, –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. üîç –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã/–≤–æ–ø—Ä–æ—Å–∞
2. üí° –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è  
3. ‚ö†Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å
4. üìã –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
5. üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏.
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
{user_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}
                """
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö). –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É."
                        },
                        {
                            "role": "user",
                            "content": enhanced_prompt
                        }
                    ],
                    max_tokens=1200,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                if any(word in answer.lower() for word in ['–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω', '–≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω']):
                    answer = None
                    
            except Exception as e:
                print(f"OpenAI question error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not answer.startswith(('üåø', 'üí°', 'üîç', '‚ö†Ô∏è', '‚úÖ', 'üå±')):
                answer = f"üåø <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{answer}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            answer += "\n\nüì∏ <i>–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!</i>"
            
            await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_answer = f"""
ü§î <b>–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{text}"

üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

üå± <b>–û—Å–Ω–æ–≤—ã —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (18-24¬∞C)
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º

‚ö†Ô∏è <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ñ–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å–≤–µ—Ç–∞
‚Ä¢ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –∫–æ–Ω—á–∏–∫–∏ ‚Üí —Å—É—Ö–æ–π –≤–æ–∑–¥—É—Ö –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä —Å —É–¥–æ–±—Ä–µ–Ω–∏—è–º–∏  
‚Ä¢ –û–ø–∞–¥–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ ‚Üí —Å—Ç—Ä–µ—Å—Å, —Å–º–µ–Ω–∞ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –í—è–ª—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ –∏–∑–±—ã—Ç–æ–∫ –≤–ª–∞–≥–∏

üì∏ <b>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>
–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è - —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
–ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–¥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É-–±–æ—Ç–∞–Ω–∏–∫—É.
            """
            
            await message.reply(fallback_answer, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.", 
            reply_markup=main_menu()
        )

# Webhook handler
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            return web.Response(status=403)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return web.Response(status=500)

# Health check –¥–ª—è Railway
async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI Plant Care Assistant", 
        "version": "2.0",
        "features": ["plant_identification", "health_assessment", "care_recommendations"]
    })

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    
    await on_startup()
    
    if WEBHOOK_URL:
        app = web.Application()
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/health', health_check)
        app.router.add_get('/', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        print(f"üöÄ Bloom AI Plant Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üå± –ì–æ—Ç–æ–≤ –∫ —Ç–æ—á–Ω–æ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π!")
        
        try:
            await asyncio.Future()
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await runner.cleanup()
            await on_shutdown()
    else:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
