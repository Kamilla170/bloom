import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import json

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///plants.db")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True)
    username = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    notifications_enabled = Column(Boolean, default=True)

class Plant(Base):
    __tablename__ = "plants"
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True)
    name = Column(String, index=True)
    plant_type = Column(String)
    description = Column(Text)
    watering_frequency = Column(Integer)  # –¥–Ω–∏
    fertilizing_frequency = Column(Integer)  # –¥–Ω–∏
    last_watered = Column(DateTime)
    last_fertilized = Column(DateTime)
    photo_path = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(bind=engine)

# FSM States
class PlantStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_plant_name = State()
    waiting_for_watering_schedule = State()
    waiting_for_fertilizing_schedule = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

class OpenAIService:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.openai.com/v1"
    
    async def analyze_plant_image(self, image_base64: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT-4 Vision"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                            {
                                "plant_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è",
                                "plant_type": "—Ç–∏–ø/—Å–µ–º–µ–π—Å—Ç–≤–æ",
                                "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                                "watering_frequency": —á–∏—Å–ª–æ_–¥–Ω–µ–π_–º–µ–∂–¥—É_–ø–æ–ª–∏–≤–∞–º–∏,
                                "fertilizing_frequency": —á–∏—Å–ª–æ_–¥–Ω–µ–π_–º–µ–∂–¥—É_–ø–æ–¥–∫–æ—Ä–º–∫–∞–º–∏,
                                "care_tips": "—Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É",
                                "confidence": –ø—Ä–æ—Ü–µ–Ω—Ç_—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏_–≤_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                            }
                            
                            –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ, —É–∫–∞–∂–∏ confidence: 0 –∏ –¥–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 1000
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{self.base_url}/chat/completions", 
                                  headers=headers, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    content = result["choices"][0]["message"]["content"]
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        json_start = content.find('{')
                        json_end = content.rfind('}') + 1
                        json_content = content[json_start:json_end]
                        return json.loads(json_content)
                    except json.JSONDecodeError:
                        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç GPT"}
                else:
                    return {"error": f"API Error: {response.status}"}
    
    async def get_plant_advice(self, question: str, plant_context: str = "") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏. 
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
        {f'–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {plant_context}' if plant_context else ''}"""
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            "max_tokens": 1000,
            "temperature": 0.7
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{self.base_url}/chat/completions", 
                                  headers=headers, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"]
                else:
                    return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –°–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService(OPENAI_API_KEY)

def get_db() -> Session:
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")],
        [InlineKeyboardButton(text="üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants")],
        [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="water_now")],
        [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications")]
    ])
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    db = get_db()
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        db.add(user)
        db.commit()
    
    welcome_text = """üå± –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!

–Ø –º–æ–≥—É:
‚Ä¢ üì∏ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üíß –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–ª–∏–≤–µ
‚Ä¢ üåø –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–æ—Ä–º–∫–∏
‚Ä¢ ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!"""
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(F.photo)
async def photo_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}") as resp:
                image_data = await resp.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        image_base64 = base64.b64encode(image_data).decode()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
        analysis = await openai_service.analyze_plant_image(image_base64)
        
        if "error" in analysis:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        confidence = analysis.get('confidence', 0)
        if confidence < 50:
            response = "ü§î –ù–µ –º–æ–≥—É —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        else:
            response = f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}%\n\n"
        
        response += f"üå± **{analysis.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')}**\n"
        response += f"üìã –¢–∏–ø: {analysis.get('plant_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n\n"
        response += f"üìù {analysis.get('description', '')}\n\n"
        response += f"üíß –ü–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {analysis.get('watering_frequency', 7)} –¥–Ω–µ–π\n"
        response += f"üåø –ü–æ–¥–∫–æ—Ä–º–∫–∞: –∫–∞–∂–¥—ã–µ {analysis.get('fertilizing_frequency', 30)} –¥–Ω–µ–π\n\n"
        response += f"üí° **–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É:**\n{analysis.get('care_tips', '')}"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", 
                                callback_data=f"save_plant_{photo.file_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(analysis=analysis, photo_file_id=photo.file_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query(F.data.startswith("save_plant_"))
async def save_plant_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    data = await state.get_data()
    analysis = data.get('analysis')
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    await callback.message.answer(
        f"üå± –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º **{analysis.get('plant_name')}** –≤ —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.\n\n"
        f"–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–§–∏–∫—É—Å –≤ –≥–æ—Å—Ç–∏–Ω–æ–π' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '{analysis.get('plant_name')}')",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlantStates.waiting_for_plant_name)
    await callback.answer()

@dp.message(StateFilter(PlantStates.waiting_for_plant_name))
async def plant_name_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    data = await state.get_data()
    analysis = data.get('analysis')
    
    db = get_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ
    plant = Plant(
        user_id=message.from_user.id,
        name=message.text,
        plant_type=analysis.get('plant_type', ''),
        description=analysis.get('description', ''),
        watering_frequency=analysis.get('watering_frequency', 7),
        fertilizing_frequency=analysis.get('fertilizing_frequency', 30),
        last_watered=datetime.utcnow(),
        last_fertilized=datetime.utcnow(),
        photo_path=data.get('photo_file_id')
    )
    
    db.add(plant)
    db.commit()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    schedule_plant_notifications(plant)
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ **{message.text}** –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f"üíß –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤: —á–µ—Ä–µ–∑ {plant.watering_frequency} –¥–Ω–µ–π\n"
        f"üåø –°–ª–µ–¥—É—é—â–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞: —á–µ—Ä–µ–∑ {plant.fertilizing_frequency} –¥–Ω–µ–π\n\n"
        f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —É—Ö–æ–¥–µ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º!",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.clear()

@dp.callback_query(F.data == "my_plants")
async def my_plants_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = get_db()
    plants = db.query(Plant).filter(Plant.user_id == callback.from_user.id).all()
    
    if not plants:
        await callback.message.answer(
            "üå± –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π.\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    response = "üåø **–¢–≤–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:**\n\n"
    
    for plant in plants:
        days_since_watering = (datetime.utcnow() - plant.last_watered).days
        days_since_fertilizing = (datetime.utcnow() - plant.last_fertilized).days
        
        next_watering = plant.watering_frequency - days_since_watering
        next_fertilizing = plant.fertilizing_frequency - days_since_fertilizing
        
        status_water = "üíß" if next_watering <= 0 else f"üíß —á–µ—Ä–µ–∑ {next_watering}–¥"
        status_fert = "üåø" if next_fertilizing <= 0 else f"üåø —á–µ—Ä–µ–∑ {next_fertilizing}–¥"
        
        response += f"üå± **{plant.name}**\n"
        response += f"   {status_water} | {status_fert}\n"
        response += f"   {plant.plant_type}\n\n"
    
    await callback.message.answer(response, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(F.data == "water_now")
async def water_now_handler(callback: CallbackQuery):
    """–ü–æ–ª–∏–≤ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–µ–π—á–∞—Å"""
    db = get_db()
    plants = db.query(Plant).filter(Plant.user_id == callback.from_user.id).all()
    
    if not plants:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–∏–≤–∞")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üíß {plant.name}", callback_data=f"water_{plant.id}")]
        for plant in plants
    ] + [[InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    
    await callback.message.answer("üíß –ö–∞–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª–∏–≤–∞–µ–º?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("water_"))
async def water_plant_handler(callback: CallbackQuery):
    """–ü–æ–ª–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    plant_id = int(callback.data.split("_")[1])
    db = get_db()
    
    plant = db.query(Plant).filter(Plant.id == plant_id).first()
    if plant:
        plant.last_watered = datetime.utcnow()
        db.commit()
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        schedule_plant_notifications(plant)
        
        await callback.message.answer(
            f"üíß –û—Ç–ª–∏—á–Ω–æ! **{plant.name}** –ø–æ–ª–∏—Ç–æ.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ {plant.watering_frequency} –¥–Ω–µ–π.",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "notifications")
async def notifications_handler(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = get_db()
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    action = "–≤—ã–∫–ª—é—á–∏—Ç—å" if user.notifications_enabled else "–≤–∫–ª—é—á–∏—Ç—å"
    callback_data = "toggle_notifications"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üîî {action.capitalize()} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=callback_data)],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.answer(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å **{status}**\n\n"
        f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ:\n"
        f"‚Ä¢ üíß –ü–æ–ª–∏–≤–µ —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        f"‚Ä¢ üåø –ü–æ–¥–∫–æ—Ä–º–∫–µ\n"
        f"‚Ä¢ üå± –û–±—â–µ–º —É—Ö–æ–¥–µ",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = get_db()
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    
    user.notifications_enabled = not user.notifications_enabled
    db.commit()
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.message(F.text)
async def text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if len(message.text.split()) < 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = get_db()
    plants = db.query(Plant).filter(Plant.user_id == message.from_user.id).all()
    
    plant_context = ""
    if plants:
        plant_context = "–†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + ", ".join([
            f"{plant.name} ({plant.plant_type})" for plant in plants
        ])
    
    await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    
    try:
        answer = await openai_service.get_plant_advice(message.text, plant_context)
        await message.answer(answer, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}")
        await message.answer(
            "‚ùå –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def schedule_plant_notifications(plant: Plant):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    try:
        scheduler.remove_job(f"water_{plant.id}")
        scheduler.remove_job(f"fertilize_{plant.id}")
    except:
        pass
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–∏–≤
    water_date = plant.last_watered + timedelta(days=plant.watering_frequency)
    scheduler.add_job(
        send_watering_reminder,
        trigger='date',
        run_date=water_date,
        args=[plant.user_id, plant.id, plant.name],
        id=f"water_{plant.id}"
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–æ—Ä–º–∫—É
    fertilize_date = plant.last_fertilized + timedelta(days=plant.fertilizing_frequency)
    scheduler.add_job(
        send_fertilizing_reminder,
        trigger='date',
        run_date=fertilize_date,
        args=[plant.user_id, plant.id, plant.name],
        id=f"fertilize_{plant.id}"
    )

async def send_watering_reminder(user_id: int, plant_id: int, plant_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ"""
    db = get_db()
    user = db.query(User).filter(User.telegram_id == user_id).first()
    
    if not user or not user.notifications_enabled:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç–æ!", callback_data=f"water_{plant_id}")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"remind_later_{plant_id}")]
    ])
    
    try:
        await bot.send_message(
            user_id,
            f"üíß –í—Ä–µ–º—è –ø–æ–ª–∏—Ç—å **{plant_name}**!\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á–≤—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É—Ö–æ–π –Ω–∞ 2-3 —Å–º –≤ –≥–ª—É–±–∏–Ω—É.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_fertilizing_reminder(user_id: int, plant_id: int, plant_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–∫–æ—Ä–º–∫–µ"""
    db = get_db()
    user = db.query(User).filter(User.telegram_id == user_id).first()
    
    if not user or not user.notifications_enabled:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåø –ü–æ–¥–∫–æ—Ä–º–ª–µ–Ω–æ!", callback_data=f"fertilize_{plant_id}")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"remind_fert_later_{plant_id}")]
    ])
    
    try:
        await bot.send_message(
            user_id,
            f"üåø –í—Ä–µ–º—è –ø–æ–¥–∫–æ—Ä–º–∏—Ç—å **{plant_name}**!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üå± –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
    db = get_db()
    plants = db.query(Plant).all()
    for plant in plants:
        schedule_plant_notifications(plant)
    
    print(f"üìÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(plants)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
