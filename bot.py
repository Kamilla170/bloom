import os
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
reminders = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üå±! –Ø –±–æ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ GPT.\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è ‚Äî –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —ç—Ç–æ.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /remind –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–ª–∏–≤, —É–¥–æ–±—Ä–µ–Ω–∏–µ)."
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(lambda m: m.photo)
async def handle_photo(message: Message):
    try:
        photo = message.photo[-1]  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –±–æ—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º."},
                {"role": "user", "content": f"–ß—Ç–æ —ç—Ç–æ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ? –î–∞–π —Å–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É. –§–æ—Ç–æ: {file_url}"}
            ]
        )

        answer = response.choices[0].message.content
        await message.answer(answer)

    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ üòî")
        print("–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ:", e)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
@dp.message()
async def gpt_handler(message: Message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –±–æ—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏."},
                {"role": "user", "content": message.text},
            ],
        )
        answer = response.choices[0].message.content
        await message.answer(answer)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT üòî")
        print("–û—à–∏–±–∫–∞ GPT:", e)

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(lambda m: m.text and m.text.startswith("/remind"))
async def remind_handler(message: Message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <–º–∏–Ω—É—Ç—ã> <–∑–∞–¥–∞—á–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /remind 1 –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–∫")

        minutes = int(parts[1])
        task = parts[2]

        remind_time = datetime.now() + timedelta(minutes=minutes)
        reminders[remind_time] = (message.chat.id, task)

        await message.answer(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {task} —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        print("–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", e)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_loop():
    while True:
        now = datetime.now()
        due = [time for time in reminders if time <= now]
        for time in due:
            chat_id, task = reminders.pop(time)
            await bot.send_message(chat_id, f"üåø –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}")
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(reminder_loop())  # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
