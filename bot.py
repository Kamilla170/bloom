import os
import asyncio
import base64
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ ---
user_plants = {}      # {user_id: [ {"name": ..., "type": ..., "watering_days": ..., "fertilizing_days": ...} ]}
care_logs = {}        # {user_id: [ {"plant": ..., "action": ..., "time": ..., "notes": ...} ]}
reminders = {}        # {datetime: (chat_id, task)}

# --- START ---
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "üå± –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Üí —Å–∫–∞–∂—É —á—Ç–æ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ.\n"
        "üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Üí –æ—Ç–≤–µ—á—É GPT.\n"
        "üî¨ /health ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "üìÖ /schedule ‚Üí —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ö–æ–¥–∞.\n"
        "üìù /log ‚Üí –∂—É—Ä–Ω–∞–ª.\n"
        "üìä /stats ‚Üí —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
        "‚è∞ /remind ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    )

# --- GPT –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç ---
@dp.message(lambda m: m.text and not m.text.startswith("/"))
async def gpt_answer(message: types.Message):
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏."},
            {"role": "user", "content": message.text}
        ]
    )
    await message.answer(resp.choices[0].message.content)

# --- –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ ---
@dp.message(lambda m: m.photo)
async def analyze_photo(message: types.Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É."},
            {"role": "user", "content": f"–§–æ—Ç–æ: {file_url}"}
        ]
    )
    await message.answer(resp.choices[0].message.content)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@dp.message(Command("remind"))
async def remind(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <–º–∏–Ω—É—Ç—ã> <–∑–∞–¥–∞—á–∞>")
    minutes = int(parts[1])
    task = parts[2]
    remind_time = datetime.now() + timedelta(minutes=minutes)
    reminders[remind_time] = (message.chat.id, task)
    await message.answer(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task} —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç")

async def reminder_loop():
    while True:
        now = datetime.now()
        for t in list(reminders.keys()):
            if t <= now:
                chat_id, task = reminders.pop(t)
                await bot.send_message(chat_id, f"üåø –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}")
        await asyncio.sleep(30)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ---
@dp.message(Command("health"))
async def health(message: types.Message):
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è.")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@dp.message(Command("schedule"))
async def schedule(message: types.Message):
    plants = user_plants.get(message.from_user.id, [])
    if not plants:
        return await message.answer("üå± –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å (—É–ø—Ä–æ—â—ë–Ω–Ω–æ).")
    info = "\n".join([f"{p['name']} ({p['type']})" for p in plants])

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–°–æ—Å—Ç–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ö–æ–¥–∞."},
            {"role": "user", "content": f"–°–æ–∑–¥–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ö–æ–¥–∞ –¥–ª—è: {info}"}
        ]
    )
    await message.answer(resp.choices[0].message.content)

# --- –ñ—É—Ä–Ω–∞–ª —É—Ö–æ–¥–∞ ---
@dp.message(Command("log"))
async def log(message: types.Message):
    logs = care_logs.get(message.from_user.id, [])
    if not logs:
        return await message.answer("üìù –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
    for log in logs[-10:]:
        text += f"{log['time']} ‚Äî {log['plant']} ‚Äî {log['action']} ({log['notes']})\n"
    await message.answer(text)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message(Command("stats"))
async def stats(message: types.Message):
    logs = care_logs.get(message.from_user.id, [])
    if not logs:
        return await message.answer("üìä –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    total = len(logs)
    watering = sum(1 for l in logs if l['action'] == "–ø–æ–ª–∏–≤")
    fertilizing = sum(1 for l in logs if l['action'] == "–ø–æ–¥–∫–æ—Ä–º–∫–∞")
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total}\nüíß –ü–æ–ª–∏–≤–æ–≤: {watering}\nüåø –ü–æ–¥–∫–æ—Ä–º–æ–∫: {fertilizing}"
    )

# --- MAIN ---
async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
