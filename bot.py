import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, Any
import json
import base64

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "YOUR_OPENAI_KEY")

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ (–≤–º–µ—Å—Ç–æ –ë–î)
user_plants = {}  # {user_id: [{"name": "–§–∏–∫—É—Å", "type": "–§–∏–∫—É—Å", ...}, ...]}
user_settings = {}  # {user_id: {"notifications": True}}

# FSM States
class PlantStates(StatesGroup):
    waiting_for_plant_name = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class OpenAIService:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.openai.com/v1"
    
    async def analyze_plant_image(self, image_base64: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT-4 Vision"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                            {
                                "plant_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è",
                                "plant_type": "—Ç–∏–ø/—Å–µ–º–µ–π—Å—Ç–≤–æ", 
                                "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                                "watering_frequency": —á–∏—Å–ª–æ_–¥–Ω–µ–π_–º–µ–∂–¥—É_–ø–æ–ª–∏–≤–∞–º–∏,
                                "care_tips": "—Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É",
                                "confidence": –ø—Ä–æ—Ü–µ–Ω—Ç_—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏_–≤_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                            }
                            
                            –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ, —É–∫–∞–∂–∏ confidence: 0."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 800
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/chat/completions", 
                                      headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result["choices"][0]["message"]["content"]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        json_start = content.find('{')
                        json_end = content.rfind('}') + 1
                        if json_start != -1 and json_end != -1:
                            json_content = content[json_start:json_end]
                            return json.loads(json_content)
                        else:
                            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç GPT"}
                    else:
                        return {"error": f"API Error: {response.status}"}
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞: {str(e)}"}
    
    async def get_plant_advice(self, question: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."
                },
                {"role": "user", "content": question}
            ],
            "max_tokens": 800
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/chat/completions", 
                                      headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["choices"][0]["message"]["content"]
                    else:
                        return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
        except Exception:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –°–µ—Ä–≤–∏—Å
openai_service = OpenAIService(OPENAI_API_KEY)

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    if user_id not in user_plants:
        user_plants[user_id] = []
    if user_id not in user_settings:
        user_settings[user_id] = {"notifications": True}
    
    welcome_text = """üå± –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!

–Ø –º–æ–≥—É:
‚Ä¢ üì∏ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üåø –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É  
‚Ä¢ ‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö

**–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!** üì∑"""
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(F.photo)
async def photo_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
            async with session.get(url) as resp:
                image_data = await resp.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        image_base64 = base64.b64encode(image_data).decode()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
        analysis = await openai_service.analyze_plant_image(image_base64)
        
        if "error" in analysis:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {analysis['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        confidence = analysis.get('confidence', 0)
        if confidence < 50:
            response = "ü§î –ù–µ –º–æ–≥—É —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç —á—Ç–æ –≤–∏–∂—É:\n\n"
        else:
            response = f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}%!\n\n"
        
        response += f"üå± **{analysis.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')}**\n"
        response += f"üìã –¢–∏–ø: {analysis.get('plant_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n\n"
        response += f"üìù {analysis.get('description', '')}\n\n"
        response += f"üíß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {analysis.get('watering_frequency', 7)} –¥–Ω–µ–π\n\n"
        response += f"üí° **–°–æ–≤–µ—Ç—ã:**\n{analysis.get('care_tips', '–û–±—â–∏–π —É—Ö–æ–¥ –∫–∞–∫ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π')}"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", 
                                callback_data="save_plant")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(analysis=analysis)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query(F.data == "save_plant")
async def save_plant_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    data = await state.get_data()
    analysis = data.get('analysis')
    
    if not analysis:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    await callback.message.answer(
        f"üå± –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ—Ö—Ä–∞–Ω–∏–º **{analysis.get('plant_name')}**.\n\n"
        f"–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–§–∏–∫—É—Å –≤ –≥–æ—Å—Ç–∏–Ω–æ–π')",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlantStates.waiting_for_plant_name)
    await callback.answer()

@dp.message(StateFilter(PlantStates.waiting_for_plant_name))
async def plant_name_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    data = await state.get_data()
    analysis = data.get('analysis')
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
    plant = {
        "name": message.text,
        "plant_name": analysis.get('plant_name', ''),
        "plant_type": analysis.get('plant_type', ''),
        "description": analysis.get('description', ''),
        "watering_frequency": analysis.get('watering_frequency', 7),
        "care_tips": analysis.get('care_tips', ''),
        "added_date": datetime.now().strftime("%Y-%m-%d")
    }
    
    user_plants[user_id].append(plant)
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ **{message.text}** —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n\n"
        f"üíß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {plant['watering_frequency']} –¥–Ω–µ–π\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è'",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.clear()

@dp.callback_query(F.data == "my_plants")
async def my_plants_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    plants = user_plants.get(user_id, [])
    
    if not plants:
        await callback.message.answer(
            "üå± –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    response = "üåø **–¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π:**\n\n"
    
    for i, plant in enumerate(plants, 1):
        response += f"**{i}. {plant['name']}**\n"
        response += f"   üå± {plant['plant_name']} ({plant['plant_type']})\n"
        response += f"   üíß –ü–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {plant['watering_frequency']} –¥–Ω–µ–π\n"
        response += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {plant['added_date']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="clear_plants")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(F.data == "clear_plants")
async def clear_plants_handler(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    user_plants[user_id] = []
    
    await callback.message.answer(
        "üóë –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "ask_question")
async def ask_question_handler(callback: CallbackQuery):
    """–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
    await callback.message.answer(
        "‚ùì **–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö!**\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ü–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è —É —Ñ–∏–∫—É—Å–∞?\n"
        "‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å –∫–∞–∫—Ç—É—Å?\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö –ø—è—Ç–Ω–∞?\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üëá",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """‚ÑπÔ∏è **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

üå± **–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é

‚ùì **–í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö:**
‚Ä¢ –ù–∞–∂–º–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —É—Ö–æ–¥–µ
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç

üì± **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    await callback.message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(F.text)
async def text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if len(message.text.split()) < 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return
    
    await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    
    try:
        answer = await openai_service.get_plant_advice(message.text)
        await message.answer(f"üí° {answer}", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}")
        await message.answer(
            "‚ùå –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üå± –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
