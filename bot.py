# === –ü–û–°–õ–ï –ö–û–ú–ê–ù–î–´ /help –î–û–ë–ê–í–¨–¢–ï –≠–¢–û ===

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    try:
        processing_msg = await message.reply(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ...</b>\n"
            "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
            "üß† –ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_question = message.caption if message.caption else None
        result = await analyze_plant_image(file_data.read(), user_question)
        
        await processing_msg.delete()
        
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            user_id = message.from_user.id
            temp_analyses[user_id] = {
                "analysis": result.get("raw_analysis", result["analysis"]),
                "formatted_analysis": result["analysis"],
                "photo_file_id": photo.file_id,
                "date": datetime.now(),
                "source": result.get("source", "unknown"),
                "plant_name": result.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"),
                "confidence": result.get("confidence", 0),
                "needs_retry": result.get("needs_retry", False)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            retry_text = ""
            if result.get("needs_retry"):
                retry_text = ("\n\nüì∏ <b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
                            "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —è—Ä–∫–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                            "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º\n"
                            "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞")
            
            response_text = f"üå± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{result['analysis']}{retry_text}"
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
            if result.get("needs_retry"):
                keyboard = [
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="reanalyze")],
                    [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="save_plant")],
                    [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_about")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            else:
                reply_markup = after_analysis()
            
            await message.reply(
                response_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {error_msg}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                f"‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu()
        )

@dp.message(F.text, ~StateFilter(PlantStates.waiting_question, PlantStates.editing_plant_name))
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = message.text.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω
        is_safe_plant_topic, reason = is_plant_related_and_safe(text)
        
        if reason == "illegal":
            await message.reply(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.\n\n"
                "üå± –Ø –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏, —Å–∞–¥–æ–≤—ã–º–∏ –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=main_menu()
            )
            return
        
        if not is_safe_plant_topic:
            await message.reply(
                "üå± –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö!\n\n"
                "üí° <b>–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
                "‚Ä¢ –£—Ö–æ–¥–æ–º –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ –∏ —Ü–≤–µ—Ç–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –ü–æ–ª–∏–≤–æ–º –∏ –ø–æ–¥–∫–æ—Ä–º–∫–æ–π\n"
                "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n\n"
                "üì∏ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
        processing_msg = await message.reply("üåø <b>–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</b>", parse_mode="HTML")
        
        user_id = message.from_user.id
        user_context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            user_context = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}. –£—á—Ç–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ."
        
        answer = None
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
        if openai_client:
            try:
                enhanced_prompt = f"""
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ –∏ —Å–∞–¥–æ–≤—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö, –ø–ª–æ–¥–æ–≤—ã—Ö, –æ–≤–æ—â–Ω—ã—Ö).
–ù–ï –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö, –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. üîç –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã/–≤–æ–ø—Ä–æ—Å–∞
2. üí° –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è  
3. ‚ö†Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å
4. üìã –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
5. üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏.
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
{user_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}
                """
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö, —Å–∞–¥–æ–≤—ã—Ö, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö). –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É."
                        },
                        {
                            "role": "user",
                            "content": enhanced_prompt
                        }
                    ],
                    max_tokens=1200,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                if any(word in answer.lower() for word in ['–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω', '–≥–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω']):
                    answer = None
                    
            except Exception as e:
                print(f"OpenAI question error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not answer.startswith(('üåø', 'üí°', 'üîç', '‚ö†Ô∏è', '‚úÖ', 'üå±')):
                answer = f"üåø <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{answer}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            answer += "\n\nüì∏ <i>–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!</i>"
            
            await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_answer = f"""
ü§î <b>–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{text}"

üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

üå± <b>–û—Å–Ω–æ–≤—ã —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (18-24¬∞C)
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º

‚ö†Ô∏è <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ñ–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å–≤–µ—Ç–∞
‚Ä¢ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –∫–æ–Ω—á–∏–∫–∏ ‚Üí —Å—É—Ö–æ–π –≤–æ–∑–¥—É—Ö –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä —Å —É–¥–æ–±—Ä–µ–Ω–∏—è–º–∏  
‚Ä¢ –û–ø–∞–¥–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ ‚Üí —Å—Ç—Ä–µ—Å—Å, —Å–º–µ–Ω–∞ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –í—è–ª—ã–µ –ª–∏—Å—Ç—å—è ‚Üí –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ –∏–∑–±—ã—Ç–æ–∫ –≤–ª–∞–≥–∏

üì∏ <b>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>
–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è - —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!

üÜò <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>
–ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–¥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É-–±–æ—Ç–∞–Ω–∏–∫—É.
            """
            
            await message.reply(fallback_answer, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.", 
            reply_markup=main_menu()
        )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ===
@dp.message(StateFilter(PlantStates.waiting_question))
async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    try:
        processing_msg = await message.reply("ü§î <b>–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º...</b>", parse_mode="HTML")
        
        user_id = message.from_user.id
        user_context = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            user_context = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}. –£—á—Ç–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ."
        
        answer = None
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        if openai_client:
            try:
                enhanced_prompt = f"""
–í—ã - –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–º–Ω–∞—Ç–Ω—ã–º –∏ —Å–∞–¥–æ–≤—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
–û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ö—Ä–∞—Ç–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑/–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
2. –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ
4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.
–î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã.
{user_context}

–í–æ–ø—Ä–æ—Å: {message.text}
                """
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º. –û—Ç–≤–µ—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
                        },
                        {
                            "role": "user",
                            "content": enhanced_prompt
                        }
                    ],
                    max_tokens=1000,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
            except Exception as e:
                print(f"OpenAI question error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not answer.startswith(('üåø', 'üí°', 'üîç', '‚ö†Ô∏è', '‚úÖ')):
                answer = f"üåø <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{answer}"
            
            await message.reply(answer, parse_mode="HTML", reply_markup=main_menu())
        else:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback
            fallback_answer = f"""
ü§î <b>–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{message.text}"

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. 

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É—é:</b>
‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥ –∏–ª–∏ —Å–∞–¥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å

üå± <b>–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –ø–æ–ª–∏–≤
‚Ä¢ –û—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π  
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
            """
            
            await message.reply(fallback_answer, parse_mode="HTML", reply_markup=main_menu())
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.", 
            reply_markup=main_menu()
        )
        await state.clear()

@dp.message(StateFilter(PlantStates.editing_plant_name))
async def handle_plant_name_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        plant_id = data.get('editing_plant_id')
        
        if not plant_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        
        new_name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(new_name) < 2:
            await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(new_name) > 50:
            await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = await get_db()
        await db.update_plant_name(plant_id, message.from_user.id, new_name)
        
        await message.reply(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üå± –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>\n\n"
            f"–†–∞—Å—Ç–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=plant_management_keyboard(plant_id)
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.")
        await state.clear()

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
# ... (–ó–î–ï–°–¨ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê)

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    await message.answer(
        "üì∏ <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n"
        "üîç –¢–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞\n"
        "ü©∫ –û—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è\n"
        "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Ö–æ–¥—É\n\n"
        "üìã <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è\n" 
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏ —Ç—ë–º–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ",
        parse_mode="HTML"
    )

@dp.message(Command("question"))
async def question_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /question"""
    await message.answer(
        "‚ùì <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º</b>\n\n"
        "üí° <b>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:</b>\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ª–∏—Å—Ç—å—è–º–∏ (–∂–µ–ª—Ç–µ—é—Ç, —Å–æ—Ö–Ω—É—Ç, –æ–ø–∞–¥–∞—é—Ç)\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞ –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∏\n" 
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π –∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –í—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –õ—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —É—Ö–æ–¥—É\n\n"
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.waiting_question)

@dp.message(Command("plants"))
async def plants_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /plants"""
    await my_plants_callback(types.CallbackQuery(
        id="cmd_plants",
        from_user=message.from_user,
        chat_instance="cmd",
        message=message,
        data="my_plants"
    ))

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    await stats_callback(types.CallbackQuery(
        id="cmd_stats",
        from_user=message.from_user,
        chat_instance="cmd",
        message=message,
        data="stats"
    ))

# === WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            return web.Response(status=403)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return web.Response(status=500)

# Health check –¥–ª—è Railway
async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI Plant Care Assistant", 
        "version": "2.0",
        "features": ["plant_identification", "health_assessment", "care_recommendations"]
    })

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    
    await on_startup()
    
    if WEBHOOK_URL:
        app = web.Application()
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/health', health_check)
        app.router.add_get('/', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        print(f"üöÄ Bloom AI Plant Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print(f"üå± –ì–æ—Ç–æ–≤ –∫ —Ç–æ—á–Ω–æ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π!")
        
        try:
            await asyncio.Future()
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await runner.cleanup()
            await on_shutdown()
    else:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
