import os
import asyncpg
import json
from datetime import datetime
from typing import Dict, List, Optional
import logging

class PlantDatabase:
    def __init__(self):
        self.database_url = os.getenv("DATABASE_URL")
        self.pool = None
        
    async def init_pool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=3
            )
            await self.create_tables()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        async with self.pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS plants (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    analysis TEXT NOT NULL,
                    photo_file_id TEXT NOT NULL,
                    plant_name TEXT,
                    custom_name TEXT,
                    saved_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_watered TIMESTAMP,
                    watering_count INTEGER DEFAULT 0,
                    notes TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Ö–æ–¥–∞
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS care_history (
                    id SERIAL PRIMARY KEY,
                    plant_id INTEGER NOT NULL,
                    action_type TEXT NOT NULL,
                    action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    notes TEXT,
                    FOREIGN KEY (plant_id) REFERENCES plants (id) ON DELETE CASCADE
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS reminders (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    plant_id INTEGER,
                    reminder_type TEXT NOT NULL,
                    next_date TIMESTAMP NOT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
                    FOREIGN KEY (plant_id) REFERENCES plants (id) ON DELETE CASCADE
                )
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ë–î)
            try:
                await conn.execute("ALTER TABLE plants ADD COLUMN IF NOT EXISTS custom_name TEXT")
                await conn.execute("ALTER TABLE plants ADD COLUMN IF NOT EXISTS watering_count INTEGER DEFAULT 0")
                await conn.execute("ALTER TABLE plants ADD COLUMN IF NOT EXISTS notes TEXT")
            except Exception as e:
                print(f"–ö–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_plants_user_id ON plants (user_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_reminders_user_id ON reminders (user_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_care_history_plant_id ON care_history (plant_id)")
            
    def extract_plant_name_from_analysis(self, analysis_text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if not analysis_text:
            return None
        
        lines = analysis_text.split('\n')
        for line in lines:
            if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                
                # –£–±–∏—Ä–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if "(" in plant_name:
                    plant_name = plant_name.split("(")[0].strip()
                
                # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                plant_name = plant_name.split("–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:")[0].strip()
                plant_name = plant_name.split("%")[0].strip()
                plant_name = plant_name.replace("üåø", "").strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
                if 3 <= len(plant_name) <= 80 and not plant_name.lower().startswith(("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω", "–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω", "–∫–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")):
                    return plant_name
        
        return None
            
    async def add_user(self, user_id: int, username: str = None, first_name: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, username, first_name)
                VALUES ($1, $2, $3)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name
            """, user_id, username, first_name)
    
    async def save_plant(self, user_id: int, analysis: str, photo_file_id: str, plant_name: str = None) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è"""
        async with self.pool.acquire() as conn:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if not plant_name:
                plant_name = self.extract_plant_name_from_analysis(analysis)
            
            plant_id = await conn.fetchval("""
                INSERT INTO plants (user_id, analysis, photo_file_id, plant_name)
                VALUES ($1, $2, $3, $4)
                RETURNING id
            """, user_id, analysis, photo_file_id, plant_name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            try:
                await conn.execute("""
                    INSERT INTO care_history (plant_id, action_type, notes)
                    VALUES ($1, 'added', '–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é')
                """, plant_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
            
            return plant_id
    
    async def update_plant_name(self, plant_id: int, user_id: int, new_name: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE plants 
                SET custom_name = $1 
                WHERE id = $2 AND user_id = $3
            """, new_name, plant_id, user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            try:
                await conn.execute("""
                    INSERT INTO care_history (plant_id, action_type, notes)
                    VALUES ($1, 'renamed', $2)
                """, plant_id, f'–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ "{new_name}"')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    async def get_user_plants(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        async with self.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT id, analysis, photo_file_id, plant_name, custom_name, 
                       saved_date, last_watered, 
                       COALESCE(watering_count, 0) as watering_count, 
                       notes
                FROM plants 
                WHERE user_id = $1 
                ORDER BY saved_date DESC
                LIMIT $2
            """, user_id, limit)
            
            plants = []
            for row in rows:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
                display_name = None
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: custom_name (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ) -> plant_name (–∏–∑ API) -> –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ -> fallback
                if row['custom_name']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ
                    display_name = row['custom_name']
                elif row['plant_name']:
                    # –ï—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ API
                    display_name = row['plant_name']
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    extracted_name = self.extract_plant_name_from_analysis(row['analysis'])
                    if extracted_name:
                        display_name = extracted_name
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        try:
                            await conn.execute("""
                                UPDATE plants SET plant_name = $1 WHERE id = $2
                            """, extracted_name, row['id'])
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
                
                # Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—á—Ç–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)
                if not display_name or display_name.lower().startswith(("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω", "–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω", "–∫–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")):
                    display_name = f"–†–∞—Å—Ç–µ–Ω–∏–µ #{row['id']}"
                
                plants.append({
                    'id': row['id'],
                    'analysis': row['analysis'],
                    'photo_file_id': row['photo_file_id'],
                    'plant_name': row['plant_name'],
                    'custom_name': row['custom_name'],
                    'display_name': display_name,
                    'saved_date': row['saved_date'],
                    'last_watered': row['last_watered'],
                    'watering_count': row['watering_count'],
                    'notes': row['notes']
                })
            
            return plants
    
    async def get_plant_by_id(self, plant_id: int, user_id: int = None) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ ID"""
        async with self.pool.acquire() as conn:
            query = """
                SELECT id, user_id, analysis, photo_file_id, plant_name, custom_name,
                       saved_date, last_watered, 
                       COALESCE(watering_count, 0) as watering_count, 
                       notes
                FROM plants 
                WHERE id = $1
            """
            params = [plant_id]
            
            if user_id:
                query += " AND user_id = $2"
                params.append(user_id)
            
            row = await conn.fetchrow(query, *params)
            
            if row:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                display_name = row['custom_name'] or row['plant_name']
                if not display_name:
                    extracted_name = self.extract_plant_name_from_analysis(row['analysis'])
                    display_name = extracted_name or f"–†–∞—Å—Ç–µ–Ω–∏–µ #{row['id']}"
                
                return {
                    'id': row['id'],
                    'user_id': row['user_id'],
                    'analysis': row['analysis'],
                    'photo_file_id': row['photo_file_id'],
                    'plant_name': row['plant_name'],
                    'custom_name': row['custom_name'],
                    'display_name': display_name,
                    'saved_date': row['saved_date'],
                    'last_watered': row['last_watered'],
                    'watering_count': row['watering_count'],
                    'notes': row['notes']
                }
            return None
    
    async def update_watering(self, user_id: int, plant_id: int = None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤"""
        async with self.pool.acquire() as conn:
            if plant_id:
                # –ü–æ–ª–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
                await conn.execute("""
                    UPDATE plants 
                    SET last_watered = CURRENT_TIMESTAMP,
                        watering_count = COALESCE(watering_count, 0) + 1
                    WHERE user_id = $1 AND id = $2
                """, user_id, plant_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                try:
                    await conn.execute("""
                        INSERT INTO care_history (plant_id, action_type, notes)
                        VALUES ($1, 'watered', '–†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–æ')
                    """, plant_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
            else:
                # –ü–æ–ª–∏–≤ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                plant_ids = await conn.fetch("""
                    SELECT id FROM plants WHERE user_id = $1
                """, user_id)
                
                await conn.execute("""
                    UPDATE plants 
                    SET last_watered = CURRENT_TIMESTAMP,
                        watering_count = COALESCE(watering_count, 0) + 1
                    WHERE user_id = $1
                """, user_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
                for plant_row in plant_ids:
                    try:
                        await conn.execute("""
                            INSERT INTO care_history (plant_id, action_type, notes)
                            VALUES ($1, 'watered', '–†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–æ (–º–∞—Å—Å–æ–≤—ã–π –ø–æ–ª–∏–≤)')
                        """, plant_row['id'])
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    async def delete_plant(self, user_id: int, plant_id: int):
        """–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                DELETE FROM plants 
                WHERE user_id = $1 AND id = $2
            """, user_id, plant_id)
    
    async def get_plant_history(self, plant_id: int, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º"""
        async with self.pool.acquire() as conn:
            try:
                rows = await conn.fetch("""
                    SELECT action_type, action_date, notes
                    FROM care_history
                    WHERE plant_id = $1
                    ORDER BY action_date DESC
                    LIMIT $2
                """, plant_id, limit)
                
                history = []
                for row in rows:
                    history.append({
                        'action_type': row['action_type'],
                        'action_date': row['action_date'],
                        'notes': row['notes']
                    })
                
                return history
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                return []
    
    async def get_user_stats(self, user_id: int) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_plants,
                    COUNT(CASE WHEN last_watered IS NOT NULL THEN 1 END) as watered_plants,
                    COALESCE(SUM(watering_count), 0) as total_waterings,
                    MIN(saved_date) as first_plant_date,
                    MAX(last_watered) as last_watered_date
                FROM plants 
                WHERE user_id = $1
            """, user_id)
            
            return {
                'total_plants': row['total_plants'] or 0,
                'watered_plants': row['watered_plants'] or 0,
                'total_waterings': row['total_waterings'] or 0,
                'first_plant_date': row['first_plant_date'],
                'last_watered_date': row['last_watered_date']
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.pool:
            await self.pool.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = None

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global db
    db = PlantDatabase()
    await db.init_pool()
    return db

async def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global db
    if db is None:
        db = await init_database()
    return db
