import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import get_db
from keyboards.main_menu import main_menu
from states.user_states import PlantStates
from config import ADMIN_USER_IDS

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
    user_id = message.from_user.id
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            existing_user = await conn.fetchrow(
                "SELECT user_id FROM users WHERE user_id = $1", user_id
            )
            
            if not existing_user:
                await db.add_user(
                    user_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from handlers.onboarding import start_onboarding
                await start_onboarding(message)
                return
            else:
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                await show_returning_user_welcome(message)
                return
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
        await show_returning_user_welcome(message)


async def show_returning_user_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è"""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    await message.answer(
        f"üå± –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_menu()
    )


@router.message(Command("add"))
async def add_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /add"""
    await message.answer(
        "üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é –≤–∏–¥\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –î–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n\n"
        "üì∑ –ñ–¥—É –≤–∞—à–µ —Ñ–æ—Ç–æ!",
        parse_mode="HTML"
    )


@router.message(Command("grow"))
async def grow_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /grow"""
    await message.answer(
        "üåø <b>–í—ã—Ä–∞—â–∏–≤–∞–µ–º —Å –Ω—É–ª—è!</b>\n\n"
        "üå± –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.choosing_plant_to_grow)


@router.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    await message.answer(
        "üîç <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞\n"
        "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å:",
        parse_mode="HTML"
    )


@router.message(Command("question"))
async def question_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /question"""
    await message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° –Ø –ø–æ–º–æ–≥—É —Å:\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –ª–∏—Å—Ç—å–µ–≤\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏\n"
        "‚Ä¢ –£–¥–æ–±—Ä–µ–Ω–∏—è–º–∏\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.waiting_question)


@router.message(Command("plants"))
async def plants_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /plants"""
    from handlers.plants import show_plants_list
    await show_plants_list(message)


@router.message(Command("notifications"))
async def notifications_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        settings = await db.get_user_reminder_settings(user_id)
        
        if not settings:
            settings = {
                'reminder_enabled': True,
                'reminder_time': '09:00',
                'timezone': 'Europe/Moscow'
            }
        
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['reminder_enabled'] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        
        text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
‚è∞ <b>–í—Ä–µ–º—è:</b> {settings['reminder_time']} –ú–°–ö
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {settings['timezone']}

<b>–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>
üíß –ü–æ–ª–∏–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ - —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ 10:00
üå± –ó–∞–¥–∞—á–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è - –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π!
"""
        
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not settings['reminder_enabled'] else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å",
                    callback_data="toggle_reminders"
                )
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        stats = await db.get_user_stats(user_id)
        
        stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        stats_text += f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–π:</b> {stats['total_plants']}\n"
        stats_text += f"üíß <b>–ü–æ–ª–∏–≤–æ–≤:</b> {stats['total_waterings']}\n"
        
        if stats['total_growing'] > 0:
            stats_text += f"\nüåø <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ:</b>\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_growing']}\n"
            stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_growing']}\n"
        
        if stats['first_plant_date']:
            from datetime import datetime
            days_using = (datetime.now().date() - stats['first_plant_date'].date()).days
            stats_text += f"\nüìÖ <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞:</b> {days_using} –¥–Ω–µ–π\n"
        
        stats_text += f"\nüéØ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!</b>"
        
        await message.answer(
            stats_text,
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=main_menu())


@router.message(Command("test_reminders"))
async def test_reminders_command(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        await message.answer(
            f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n\n"
            f"üîë –í–∞—à ID: <code>{user_id}</code>\n"
            f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMIN_USER_IDS}",
            parse_mode="HTML"
        )
        return
    
    try:
        status_msg = await message.answer("üîÑ <b>–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...</b>", parse_mode="HTML")
        
        from services.reminder_service import check_and_send_reminders
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await check_and_send_reminders(message.bot)
        
        await status_msg.edit_text(
            "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
            "‚Ä¢ –ë—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏\n\n"
            "üí° –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –ø—Ä–∏—à–ª–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π /check_reminders",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", exc_info=True)
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b>\n\n<code>{str(e)}</code>\n\n"
            "üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
            parse_mode="HTML"
        )


@router.message(Command("check_reminders"))
async def check_reminders_status_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        await message.answer(
            f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n\n"
            f"üîë –í–∞—à ID: <code>{user_id}</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        db = await get_db()
        from utils.time_utils import get_moscow_now
        moscow_now = get_moscow_now()
        moscow_date = moscow_now.date()
        
        async with db.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            total_reminders = await conn.fetchval("""
                SELECT COUNT(*) FROM reminders 
                WHERE reminder_type = 'watering' AND is_active = TRUE
            """)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_reminders = await conn.fetch("""
                SELECT p.id, p.user_id,
                       COALESCE(p.custom_name, p.plant_name, '–†–∞—Å—Ç–µ–Ω–∏–µ #' || p.id) as display_name,
                       r.next_date, r.last_sent, r.is_active,
                       us.reminder_enabled as user_enabled,
                       p.reminder_enabled as plant_enabled
                FROM plants p
                JOIN reminders r ON r.plant_id = p.id AND r.reminder_type = 'watering'
                LEFT JOIN user_settings us ON p.user_id = us.user_id
                WHERE r.next_date::date <= $1::date
                ORDER BY r.next_date DESC
                LIMIT 10
            """, moscow_date)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
            overdue = await conn.fetchval("""
                SELECT COUNT(*) FROM reminders r
                WHERE r.reminder_type = 'watering' 
                AND r.is_active = TRUE
                AND r.next_date::date < $1::date
                AND (r.last_sent IS NULL OR r.last_sent::date < $1::date)
            """, moscow_date)
        
        response = f"""
üìä <b>–°–¢–ê–¢–£–° –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô</b>

üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö):</b> {moscow_now.strftime('%d.%m.%Y %H:%M')}
üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {moscow_date}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_reminders}
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {overdue}

üìã <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Ä–∞–Ω—å—à–µ (—Ç–æ–ø-10):</b>
"""
        
        if today_reminders:
            for i, rem in enumerate(today_reminders, 1):
                next_date = rem['next_date'].date() if rem['next_date'] else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'
                last_sent = rem['last_sent'].date() if rem['last_sent'] else '–ù–ï –û–¢–ü–†–ê–í–õ–Ø–õ–û–°–¨'
                active = '‚úÖ' if rem['is_active'] else '‚ùå'
                user_enabled = '‚úÖ' if rem['user_enabled'] else '‚ùå'
                plant_enabled = '‚úÖ' if rem['plant_enabled'] else '‚ùå'
                
                response += f"\n{i}. {rem['display_name']}\n"
                response += f"   User: {rem['user_id']}, Plant ID: {rem['id']}\n"
                response += f"   Next: {next_date}, Last: {last_sent}\n"
                response += f"   Active: {active}, UserEnabled: {user_enabled}, PlantEnabled: {plant_enabled}\n"
        else:
            response += "\n<i>–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É</i>\n"
        
        response += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_reminders –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML"
        )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üå± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

üå± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
- –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ
- –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è

üìä <b>–°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:</b>
- üíê –¶–≤–µ—Ç–µ–Ω–∏–µ - –æ—Å–æ–±—ã–π —É—Ö–æ–¥
- üåø –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç - –±–æ–ª—å—à–µ –ø–∏—Ç–∞–Ω–∏—è
- üò¥ –ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è - –º–µ–Ω—å—à–µ –ø–æ–ª–∏–≤–∞
- ‚ö†Ô∏è –°—Ç—Ä–µ—Å—Å - —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

üì∏ <b>–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
- –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

‚è∞ <b>–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –£—á–∏—Ç—ã–≤–∞—é—Ç —ç—Ç–∞–ø —Ä–æ—Å—Ç–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/grow - –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è
/help - –°–ø—Ä–∞–≤–∫–∞
    """
    
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    
    await message.answer(
        help_text, 
        parse_mode="HTML", 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.message(Command("feedback"))
async def feedback_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /feedback"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="feedback_bug")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="feedback_analysis_error")],
        [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion")],
        [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤", callback_data="feedback_review")],
    ]
    
    await message.answer(
        "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
