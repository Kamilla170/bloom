import logging
import base64
from openai import AsyncOpenAI

from config import OPENAI_API_KEY, PLANT_IDENTIFICATION_PROMPT
from utils.image_utils import optimize_image_for_analysis
from utils.formatters import format_plant_analysis

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None


def extract_plant_state_from_analysis(raw_analysis: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ AI"""
    state_info = {
        'current_state': 'healthy',
        'state_reason': '',
        'growth_stage': 'young',
        'watering_adjustment': 0,
        'feeding_adjustment': None,
        'recommendations': ''
    }
    
    if not raw_analysis:
        return state_info
    
    lines = raw_analysis.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if line.startswith("–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:"):
            state_text = line.replace("–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip().lower()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'flowering' in state_text or '—Ü–≤–µ—Ç–µ–Ω' in state_text:
                state_info['current_state'] = 'flowering'
                state_info['watering_adjustment'] = -2  # –ü–æ–ª–∏–≤–∞—Ç—å —á–∞—â–µ
            elif 'active_growth' in state_text or '–∞–∫—Ç–∏–≤–Ω' in state_text:
                state_info['current_state'] = 'active_growth'
                state_info['feeding_adjustment'] = 7  # –ü–æ–¥–∫–æ—Ä–º–∫–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
            elif 'dormancy' in state_text or '–ø–æ–∫–æ–π' in state_text:
                state_info['current_state'] = 'dormancy'
                state_info['watering_adjustment'] = 5  # –ü–æ–ª–∏–≤–∞—Ç—å —Ä–µ–∂–µ
            elif 'stress' in state_text or '—Å—Ç—Ä–µ—Å—Å' in state_text or '–±–æ–ª–µ–∑–Ω' in state_text:
                state_info['current_state'] = 'stress'
            elif 'adaptation' in state_text or '–∞–¥–∞–ø—Ç–∞—Ü' in state_text:
                state_info['current_state'] = 'adaptation'
            else:
                state_info['current_state'] = 'healthy'
        
        elif line.startswith("–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø:"):
            state_info['state_reason'] = line.replace("–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø:", "").strip()
        
        elif line.startswith("–≠–¢–ê–ü_–†–û–°–¢–ê:"):
            stage_text = line.replace("–≠–¢–ê–ü_–†–û–°–¢–ê:", "").strip().lower()
            if 'young' in stage_text or '–º–æ–ª–æ–¥' in stage_text:
                state_info['growth_stage'] = 'young'
            elif 'mature' in stage_text or '–≤–∑—Ä–æ—Å–ª' in stage_text:
                state_info['growth_stage'] = 'mature'
            elif 'old' in stage_text or '—Å—Ç–∞—Ä' in stage_text:
                state_info['growth_stage'] = 'old'
        
        elif line.startswith("–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            state_info['recommendations'] = line.replace("–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
    
    return state_info


def extract_watering_info(analysis_text: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏–≤–µ"""
    watering_info = {
        "interval_days": 5,
        "personal_recommendations": "",
        "current_state": "",
        "needs_adjustment": False
    }
    
    if not analysis_text:
        return watering_info
    
    lines = analysis_text.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if line.startswith("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:"):
            interval_text = line.replace("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:", "").strip()
            import re
            numbers = re.findall(r'\d+', interval_text)
            if numbers:
                try:
                    interval = int(numbers[0])
                    if 1 <= interval <= 15:
                        watering_info["interval_days"] = interval
                except:
                    pass
        
        elif line.startswith("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:"):
            current_state = line.replace("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:", "").strip()
            watering_info["current_state"] = current_state
            if "–Ω–µ –≤–∏–¥–Ω–∞" in current_state.lower() or "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å" in current_state.lower():
                watering_info["needs_adjustment"] = True
            elif any(word in current_state.lower() for word in ["–ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω", "–ø–µ—Ä–µ–ª–∏–≤", "–Ω–µ–¥–æ–ø–æ–ª–∏—Ç", "–ø–µ—Ä–µ—Å—É—à–µ–Ω", "–ø—Ä–æ–±–ª–µ–º"]):
                watering_info["needs_adjustment"] = True
        
        elif line.startswith("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            recommendations = line.replace("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
            watering_info["personal_recommendations"] = recommendations
            
    return watering_info


async def analyze_with_openai_advanced(image_data: bytes, user_question: str = None, previous_state: str = None) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI"""
    if not openai_client:
        return {"success": False, "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        prompt = PLANT_IDENTIFICATION_PROMPT
        
        if previous_state:
            prompt += f"\n\n–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {previous_state}. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å."
        
        if user_question:
            prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {user_question}"
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1500,
            temperature=0.2
        )
        
        raw_analysis = response.choices[0].message.content
        
        if len(raw_analysis) < 100:
            raise Exception("–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = 0
        for line in raw_analysis.split('\n'):
            if line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
                try:
                    conf_str = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip().replace("%", "")
                    confidence = float(conf_str)
                except:
                    confidence = 70
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
        plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
        for line in raw_analysis.split('\n'):
            if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_info = extract_plant_state_from_analysis(raw_analysis)
        formatted_analysis = format_plant_analysis(raw_analysis, confidence, state_info)
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_info['current_state']}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": raw_analysis,
            "plant_name": plant_name,
            "confidence": confidence,
            "source": "openai_advanced",
            "state_info": state_info
        }
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI error: {e}")
        return {"success": False, "error": str(e)}


async def analyze_plant_image(image_data: bytes, user_question: str = None, 
                             previous_state: str = None, retry_count: int = 0) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
    
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision...")
    openai_result = await analyze_with_openai_advanced(image_data, user_question, previous_state)
    
    if openai_result["success"] and openai_result.get("confidence", 0) >= 50:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {openai_result.get('confidence')}%")
        return openai_result
    
    if retry_count == 0:
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
        return await analyze_plant_image(image_data, user_question, previous_state, retry_count + 1)
    
    if openai_result["success"]:
        logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {openai_result.get('confidence')}%")
        openai_result["needs_retry"] = True
        return openai_result
    
    logger.warning("‚ö†Ô∏è Fallback")
    
    # Fallback —Ç–µ–∫—Å—Ç
    fallback_text = """
–†–ê–°–¢–ï–ù–ò–ï: –ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: 20%
–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï: healthy
–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
–≠–¢–ê–ü_–†–û–°–¢–ê: young
–°–û–°–¢–û–Ø–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä
–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: –ü–æ—á–≤–∞ –Ω–µ –≤–∏–¥–Ω–∞
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: 5
–°–í–ï–¢: –Ø—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C
–í–õ–ê–ñ–ù–û–°–¢–¨: 40-60%
–ü–û–î–ö–û–†–ú–ö–ê: –†–∞–∑ –≤ 2-4 –Ω–µ–¥–µ–ª–∏ –≤–µ—Å–Ω–æ–π-–ª–µ—Ç–æ–º
–°–û–í–ï–¢: –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """.strip()
    
    state_info = extract_plant_state_from_analysis(fallback_text)
    formatted_analysis = format_plant_analysis(fallback_text, 20, state_info)
    
    return {
        "success": True,
        "analysis": formatted_analysis,
        "raw_analysis": fallback_text,
        "plant_name": "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        "confidence": 20,
        "source": "fallback",
        "needs_retry": True,
        "state_info": state_info
    }


async def answer_plant_question(question: str, plant_context: str = None) -> str:
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if not openai_client:
        return "‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    try:
        system_prompt = """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é. 

–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã, –≤–æ–ø—Ä–æ—Å—ã, 
–ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ–±—ã –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 
–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã.

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –∏ —Å —É—á–µ—Ç–æ–º –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user_prompt = f"""–ò–°–¢–û–†–ò–Ø –†–ê–°–¢–ï–ù–ò–Ø:
{plant_context if plant_context else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{question}

–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è."""
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1000,
            temperature=0.3
        )
        
        answer = response.choices[0].message.content
        
        if plant_context:
            answer += "\n\nüí° <i>–û—Ç–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</i>"
        
        logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        return answer
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        return "‚ùå –ù–µ –º–æ–≥—É –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."


async def generate_growing_plan(plant_name: str) -> tuple:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI"""
    if not openai_client:
        return None, None
    
    try:
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –¥–ª—è: {plant_name}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üå± –≠–¢–ê–ü 1: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2
‚Ä¢ –ó–∞–¥–∞—á–∞ 3

üåø –≠–¢–ê–ü 2: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

üå∏ –≠–¢–ê–ü 3: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

üå≥ –≠–¢–ê–ü 4: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å:
–ö–ê–õ–ï–ù–î–ê–†–¨_–ó–ê–î–ê–ß: [JSON —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º]
"""
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1200,
            temperature=0.3
        )
        
        plan_text = response.choices[0].message.content
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        task_calendar = {
            "stage_1": {
                "name": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –ø–æ—Å–∞–¥–∫–∞",
                "duration_days": 7,
                "tasks": [
                    {"day": 1, "title": "–ü–æ—Å–∞–¥–∫–∞", "description": "–ü–æ—Å–∞–¥–∏—Ç–µ —Å–µ–º–µ–Ω–∞/—á–µ—Ä–µ–Ω–æ–∫", "icon": "üå±"},
                    {"day": 3, "title": "–ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≤", "description": "–£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–π—Ç–µ", "icon": "üíß"},
                    {"day": 7, "title": "–ü—Ä–æ–≤–µ—Ä–∫–∞", "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "icon": "üîç"},
                ]
            },
            "stage_2": {
                "name": "–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ",
                "duration_days": 14,
                "tasks": [
                    {"day": 10, "title": "–ü–µ—Ä–≤—ã–µ –≤—Å—Ö–æ–¥—ã", "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∫–æ–≤", "icon": "üå±"},
                    {"day": 14, "title": "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤", "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "icon": "üíß"},
                ]
            },
            "stage_3": {
                "name": "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç",
                "duration_days": 30,
                "tasks": [
                    {"day": 21, "title": "–ü–µ—Ä–≤–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞", "description": "–í–Ω–µ—Å–∏—Ç–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ", "icon": "üçΩÔ∏è"},
                    {"day": 35, "title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞", "description": "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", "icon": "üìä"},
                ]
            },
            "stage_4": {
                "name": "–í–∑—Ä–æ—Å–ª–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
                "duration_days": 30,
                "tasks": [
                    {"day": 50, "title": "–ü–µ—Ä–µ—Å–∞–¥–∫–∞", "description": "–ü–µ—Ä–µ—Å–∞–¥–∏—Ç–µ –≤ –±–æ–ª—å—à–∏–π –≥–æ—Ä—à–æ–∫", "icon": "ü™¥"},
                    {"day": 60, "title": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "description": "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–µ–∂—å—Ç–µ", "icon": "‚úÇÔ∏è"},
                ]
            }
        }
        
        return plan_text, task_calendar
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        return None, None
