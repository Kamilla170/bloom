import logging
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import STATE_EMOJI, STATE_NAMES
from utils.time_utils import get_moscow_now
from database import get_db
from keyboards.plant_menu import watering_reminder_actions

logger = logging.getLogger(__name__)


async def check_and_send_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        logger.info("=" * 60)
        logger.info("üîî –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô")
        logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {get_moscow_now()}")
        logger.info("=" * 60)
        
        await send_watering_reminders(bot)
        await send_growing_reminders(bot)
        
        logger.info("=" * 60)
        logger.info("‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 60)
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)


async def send_watering_reminders(bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª–∏–≤–µ"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        moscow_date = moscow_now.date()
        
        logger.info("")
        logger.info("üíß –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –û –ü–û–õ–ò–í–ï")
        logger.info(f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {moscow_date}")
        
        async with db.pool.acquire() as conn:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            total_plants = await conn.fetchval("""
                SELECT COUNT(*) FROM plants p
                JOIN reminders r ON r.plant_id = p.id AND r.reminder_type = 'watering' AND r.is_active = TRUE
                WHERE p.plant_type = 'regular'
            """)
            logger.info(f"üìä –í—Å–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {total_plants}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º next_date –∏–∑ reminders
            plants_to_water = await conn.fetch("""
                SELECT p.id, p.user_id, 
                       COALESCE(p.custom_name, p.plant_name, '–†–∞—Å—Ç–µ–Ω–∏–µ #' || p.id) as display_name,
                       p.last_watered, 
                       COALESCE(p.watering_interval, 5) as watering_interval, 
                       p.photo_file_id, p.notes, p.current_state, p.growth_stage,
                       r.id as reminder_id,
                       r.next_date,
                       r.last_sent,
                       us.reminder_enabled as user_reminder_enabled,
                       p.reminder_enabled as plant_reminder_enabled
                FROM plants p
                JOIN user_settings us ON p.user_id = us.user_id
                JOIN reminders r ON r.plant_id = p.id 
                                AND r.reminder_type = 'watering' 
                                AND r.is_active = TRUE
                WHERE p.reminder_enabled = TRUE 
                  AND us.reminder_enabled = TRUE
                  AND p.plant_type = 'regular'
                  AND r.next_date::date <= $1::date
                  AND (r.last_sent IS NULL OR r.last_sent::date < $1::date)
                ORDER BY r.next_date ASC
            """, moscow_date)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(plants_to_water)}")
            
            if len(plants_to_water) > 0:
                logger.info("üìã –°–ü–ò–°–û–ö –†–ê–°–¢–ï–ù–ò–ô –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô:")
                for i, plant in enumerate(plants_to_water, 1):
                    logger.info(f"   {i}. ID={plant['id']}, User={plant['user_id']}, "
                              f"–ù–∞–∑–≤–∞–Ω–∏–µ='{plant['display_name']}', "
                              f"NextDate={plant['next_date']}, "
                              f"LastSent={plant['last_sent']}")
            else:
                logger.info("‚úÖ –ù–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É")
            
            sent_count = 0
            error_count = 0
            
            for plant in plants_to_water:
                try:
                    await send_single_watering_reminder(bot, plant)
                    sent_count += 1
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant['id']}: {e}")
            
            logger.info(f"üìä –ò–¢–û–ì–û: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –û—à–∏–±–æ–∫ {error_count}")
                
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê send_watering_reminders: {e}", exc_info=True)


async def send_single_watering_reminder(bot, plant_row):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ"""
    try:
        user_id = plant_row['user_id']
        plant_id = plant_row['id']
        plant_name = plant_row['display_name']
        current_state = plant_row.get('current_state', 'healthy')
        
        moscow_now = get_moscow_now()
        
        if plant_row['last_watered']:
            days_ago = (moscow_now.date() - plant_row['last_watered'].date()).days
            if days_ago == 0:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è"
            elif days_ago == 1:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª –≤—á–µ—Ä–∞"
            else:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        else:
            time_info = "–†–∞—Å—Ç–µ–Ω–∏–µ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        state_emoji = STATE_EMOJI.get(current_state, 'üå±')
        state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
        
        message_text = f"üíß <b>–í—Ä–µ–º—è –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ!</b>\n\n"
        message_text += f"{state_emoji} <b>{plant_name}</b>\n"
        message_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_name}\n"
        message_text += f"‚è∞ {time_info}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if current_state == 'flowering':
            message_text += f"üíê –†–∞—Å—Ç–µ–Ω–∏–µ —Ü–≤–µ—Ç–µ—Ç - –ø–æ–ª–∏–≤–∞–π—Ç–µ —á–∞—â–µ!\n"
        elif current_state == 'dormancy':
            message_text += f"üò¥ –ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è - –ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–µ–∂–µ\n"
        elif current_state == 'stress':
            message_text += f"‚ö†Ô∏è –†–∞—Å—Ç–µ–Ω–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã!\n"
        
        interval = plant_row.get('watering_interval', 5)
        message_text += f"\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π"
        
        keyboard = watering_reminder_actions(plant_id)
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: User={user_id}, Plant='{plant_name}' (ID={plant_id})")
        
        await bot.send_photo(
            chat_id=user_id,
            photo=plant_row['photo_file_id'],
            caption=message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_sent –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        db = await get_db()
        moscow_now_naive = moscow_now.replace(tzinfo=None)
        next_reminder = moscow_now + timedelta(days=interval)
        next_reminder_naive = next_reminder.replace(tzinfo=None)
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE reminders
                SET last_sent = $1,
                    send_count = COALESCE(send_count, 0) + 1,
                    next_date = $2
                WHERE id = $3
            """, moscow_now_naive, next_reminder_naive, plant_row['reminder_id'])
        
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ: {next_reminder.date()}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_row.get('id')}: {e}", exc_info=True)
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞


async def send_growing_reminders(bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        
        logger.info("")
        logger.info("üå± –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ü–û –í–´–†–ê–©–ò–í–ê–ù–ò–Æ")
        
        async with db.pool.acquire() as conn:
            reminders = await conn.fetch("""
                SELECT r.id as reminder_id, r.task_day, r.stage_number,
                       gp.id as growing_id, gp.user_id, gp.plant_name, 
                       gp.task_calendar, gp.current_stage, gp.started_date,
                       gp.photo_file_id
                FROM reminders r
                JOIN growing_plants gp ON r.growing_plant_id = gp.id
                JOIN user_settings us ON gp.user_id = us.user_id
                WHERE r.reminder_type = 'task'
                  AND r.is_active = TRUE
                  AND us.reminder_enabled = TRUE
                  AND gp.status = 'active'
                  AND r.next_date::date <= $1::date
                  AND (r.last_sent IS NULL OR r.last_sent::date < $1::date)
            """, moscow_now.date())
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é: {len(reminders)}")
            
            for reminder in reminders:
                await send_task_reminder(bot, reminder)
                
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê send_growing_reminders: {e}", exc_info=True)


async def send_task_reminder(bot, reminder_row):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ"""
    try:
        user_id = reminder_row['user_id']
        growing_id = reminder_row['growing_id']
        plant_name = reminder_row['plant_name']
        task_day = reminder_row['task_day']
        
        message_text = f"üå± <b>–ó–∞–¥–∞—á–∞ –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é</b>\n\n"
        message_text += f"<b>{plant_name}</b>\n"
        message_text += f"üìÖ –î–µ–Ω—å {task_day}\n"
        message_text += f"\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
        
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", callback_data=f"task_done_{growing_id}_{task_day}")],
            [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"add_diary_photo_{growing_id}")],
        ]
        
        if reminder_row['photo_file_id']:
            await bot.send_photo(
                chat_id=user_id,
                photo=reminder_row['photo_file_id'],
                caption=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        db = await get_db()
        moscow_now = get_moscow_now().replace(tzinfo=None)
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE reminders
                SET last_sent = $1,
                    send_count = COALESCE(send_count, 0) + 1
                WHERE id = $2
            """, moscow_now, reminder_row['reminder_id'])
        
        logger.info(f"üå± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {plant_name} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)


async def create_plant_reminder(plant_id: int, user_id: int, interval_days: int = 5):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–ª–∏–≤–µ"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        next_watering = moscow_now + timedelta(days=interval_days)
        next_watering_naive = next_watering.replace(tzinfo=None)
        
        async with db.pool.acquire() as conn:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
            deactivated = await conn.fetchval("""
                UPDATE reminders 
                SET is_active = FALSE 
                WHERE user_id = $1 
                AND plant_id = $2 
                AND reminder_type = 'watering'
                AND is_active = TRUE
                RETURNING id
            """, user_id, plant_id)
            
            if deactivated:
                logger.info(f"‚öôÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_id = await conn.fetchval("""
                INSERT INTO reminders (user_id, plant_id, reminder_type, next_date, is_active)
                VALUES ($1, $2, 'watering', $3, TRUE)
                RETURNING id
            """, user_id, plant_id, next_watering_naive)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID={reminder_id} –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id} (user {user_id}) –Ω–∞ {next_watering.date()} (—á–µ—Ä–µ–∑ {interval_days} –¥–Ω–µ–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id}: {e}", exc_info=True)
        raise


async def check_monthly_photo_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    try:
        logger.info("")
        logger.info("üì∏ –ü–†–û–í–ï–†–ö–ê –ú–ï–°–Ø–ß–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô")
        
        db = await get_db()
        plants = await db.get_plants_for_monthly_reminder()
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_plants = {}
        for plant in plants:
            user_id = plant['user_id']
            if user_id not in users_plants:
                users_plants[user_id] = []
            users_plants[user_id].append(plant)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, user_plants in users_plants.items():
            await send_monthly_photo_reminder(bot, user_id, user_plants)
            await db.mark_monthly_reminder_sent(user_id)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)


async def send_monthly_photo_reminder(bot, user_id: int, plants: list):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    try:
        if not plants:
            return
        
        plants_text = ""
        for i, plant in enumerate(plants[:5], 1):
            plant_name = plant.get('custom_name') or plant.get('plant_name') or f"–†–∞—Å—Ç–µ–Ω–∏–µ #{plant['id']}"
            days_ago = (get_moscow_now() - plant['last_photo_analysis']).days
            current_state = STATE_EMOJI.get(plant.get('current_state', 'healthy'), 'üå±')
            plants_text += f"{i}. {current_state} {plant_name} (—Ñ–æ—Ç–æ {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n"
        
        if len(plants) > 5:
            plants_text += f"...–∏ –µ—â–µ {len(plants) - 5} —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        
        message_text = f"""
üì∏ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π!</b>

–ü—Ä–æ—à–µ–ª –º–µ—Å—è—Ü —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:

{plants_text}

üí° <b>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É—Ö–æ–¥–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é

üì∑ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!
"""
        
        keyboard = [
            [InlineKeyboardButton(text="üåø –ö –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="snooze_monthly_reminder")],
            [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="disable_monthly_reminders")],
        ]
        
        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        logger.info(f"üì∏ –ú–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id} ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", exc_info=True)
